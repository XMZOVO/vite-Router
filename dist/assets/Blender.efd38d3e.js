import{R as xe,G as ge,D as be,P as Ee,V as bt,O as ze,e as Ce,S as Se,M as Pt,f as Vt,g as Gt,b as Me,s as Ht,W as Ae,h as Be,i as Ne,L as Te}from"./dat.gui.module.9a8882a1.js";import{D as Pe,G as Fe,g as Ie}from"./index.1fb49f4c.js";import{_ as _e}from"./index.80d68587.js";import{l as Re,B as qe,C as Le,p as Oe}from"./vendor.a9b44f4b.js";class Z{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Z);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],l=s[3],d=s[4],u=s[5],h=s[6],p=s[7],f=s[8],y=n[0],m=n[1],w=n[2],v=n[3],g=n[4],x=n[5],b=n[6],C=n[7],A=n[8];return i[0]=o*y+r*v+a*b,i[1]=o*m+r*g+a*C,i[2]=o*w+r*x+a*A,i[3]=l*y+d*v+u*b,i[4]=l*m+d*g+u*C,i[5]=l*w+d*x+u*A,i[6]=h*y+p*v+f*b,i[7]=h*m+p*g+f*C,i[8]=h*w+p*x+f*A,e}scale(t,e){e===void 0&&(e=new Z);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const l=a;let d;const u=4;let h;do{if(o=l-a,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const p=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*p;while(--d)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Z);const e=3,s=6,n=je;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let l;const d=s;let u;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,l=e*o,d=e*r,u=e*a,h=s*r,p=s*a,f=n*a,y=i*o,m=i*r,w=i*a,v=this.elements;return v[3*0+0]=1-(h+f),v[3*0+1]=d-w,v[3*0+2]=u+m,v[3*1+0]=d+w,v[3*1+1]=1-(l+f),v[3*1+2]=p-y,v[3*2+0]=u-m,v[3*2+1]=p+y,v[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new Z);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const je=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=We,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=ke;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Dt),Dt.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const We=new c,ke=new c,Dt=new c;class X{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,Yt),l=Yt),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new X().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),a.copy(d)}toLocalFrame(t,e){const s=Ut,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const p=s[h];t.pointToLocal(p,p)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Ut,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const p=s[h];t.pointToWorld(p,p)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,p=Math.max(Math.max(Math.min(r,a),Math.min(l,d)),Math.min(u,h)),f=Math.min(Math.min(Math.max(r,a),Math.max(l,d)),Math.max(u,h));return!(f<0||p>f)}}const Yt=new c,Ut=[new c,new c,new c,new c,new c,new c,new c,new c];class Xt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class he{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Ve,n=Ge;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*a,e.y=n*d+o*a+i*r-s*l,e.z=i*d+o*l+s*a-n*r,e.w=o*d-s*r-n*a-i*l,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,l=this.w,d=l*s+r*i-a*n,u=l*n+a*s-o*i,h=l*i+o*n-r*s,p=-o*s-r*n-a*i;return e.x=d*l+p*-o+u*-a-h*-r,e.y=u*l+p*-r+h*-o-d*-a,e.z=h*l+p*-a+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const d=o*r+a*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,p=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*p),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*a,1-2*u-2*p)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="YXZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="ZXY"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="ZYX"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="YZX"?(this.x=a*o*r+i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r-a*l*d):n==="XZY"&&(this.x=a*o*r-i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r+a*l*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,l=t.y,d=t.z,u=t.w,h,p,f,y,m;return p=n*a+i*l+o*d+r*u,p<0&&(p=-p,a=-a,l=-l,d=-d,u=-u),1-p>1e-6?(h=Math.acos(p),f=Math.sin(h),y=Math.sin((1-e)*h)/f,m=Math.sin(e*h)/f):(y=1-e,m=e),s.x=y*n+m*a,s.y=y*i+m*l,s.z=y*o+m*d,s.w=y*r+m*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*a-i*d),n.z+=h*(r*u+i*l-o*a),n.w+=h*(-i*a-o*l-r*d),n}}const Ve=new c,Ge=new c,He={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class N{constructor(t){t===void 0&&(t={}),this.id=N.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}N.idCounter=0;N.types=He;class j{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return j.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return j.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate($t),$t.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const $t=new G;class mt extends N{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:N.types.CONVEXPOLYHEDRON});this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[o[a]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];mt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,l){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let f=0;f<s.faces.length;f++){d.copy(s.faceNormals[f]),i.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=f)}const p=[];for(let f=0;f<s.faces[u].length;f++){const y=s.vertices[s.faces[u][f]],m=new c;m.copy(y),i.vmult(m,m),n.vadd(m,m),p.push(m)}u>=0&&this.clipFaceAgainstHull(o,t,e,p,r,a,l)}findSeparatingAxis(t,e,s,n,i,o,r,a){const l=new c,d=new c,u=new c,h=new c,p=new c,f=new c;let y=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let w=0;w!==m.uniqueAxes.length;w++){s.vmult(m.uniqueAxes[w],l);const v=m.testSepAxis(l,t,e,s,n,i);if(v===!1)return!1;v<y&&(y=v,o.copy(l))}else{const w=r?r.length:m.faces.length;for(let v=0;v<w;v++){const g=r?r[v]:v;l.copy(m.faceNormals[g]),s.vmult(l,l);const x=m.testSepAxis(l,t,e,s,n,i);if(x===!1)return!1;x<y&&(y=x,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const v=m.testSepAxis(d,t,e,s,n,i);if(v===!1)return!1;v<y&&(y=v,o.copy(d))}else{const w=a?a.length:t.faces.length;for(let v=0;v<w;v++){const g=a?a[v]:v;d.copy(t.faceNormals[g]),i.vmult(d,d);const x=m.testSepAxis(d,t,e,s,n,i);if(x===!1)return!1;x<y&&(y=x,o.copy(d))}}for(let w=0;w!==m.uniqueEdges.length;w++){s.vmult(m.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],p),h.cross(p,f),!f.almostZero()){f.normalize();const g=m.testSepAxis(f,t,e,s,n,i);if(g===!1)return!1;g<y&&(y=g,o.copy(f))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;mt.project(r,t,s,n,Ft),mt.project(e,t,i,o,It);const a=Ft[0],l=Ft[1],d=It[0],u=It[1];if(a<u||d<l)return!1;const h=a-u,p=d-l;return h<p?h:p}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new c,l=new c,d=new c,u=new c,h=new c,p=new c,f=new c,y=new c,m=this,w=[],v=n,g=w;let x=-1,b=Number.MAX_VALUE;for(let T=0;T<m.faces.length;T++){a.copy(m.faceNormals[T]),s.vmult(a,a);const I=a.dot(t);I<b&&(b=I,x=T)}if(x<0)return;const C=m.faces[x];C.connectedFaces=[];for(let T=0;T<m.faces.length;T++)for(let I=0;I<m.faces[T].length;I++)C.indexOf(m.faces[T][I])!==-1&&T!==x&&C.connectedFaces.indexOf(T)===-1&&C.connectedFaces.push(T);const A=C.length;for(let T=0;T<A;T++){const I=m.vertices[C[T]],L=m.vertices[C[(T+1)%A]];I.vsub(L,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[x]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),p.copy(I),s.vmult(p,p),e.vadd(p,p);const E=C.connectedFaces[T];f.copy(this.faceNormals[E]);const M=this.getPlaneConstantOfFace(E);y.copy(f),s.vmult(y,y);const S=M-y.dot(e);for(this.clipFaceAgainstPlane(v,g,y,S);v.length;)v.shift();for(;g.length;)v.push(g.shift())}f.copy(this.faceNormals[x]);const P=this.getPlaneConstantOfFace(x);y.copy(f),s.vmult(y,y);const _=P-y.dot(e);for(let T=0;T<v.length;T++){let I=y.dot(v[T])+_;if(I<=i&&(console.log(`clamped: depth=${I} to minDist=${i}`),I=i),I<=o){const L=v[T];if(I<=1e-6){const E={point:L,normal:y,depth:I};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];i=s.dot(a)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new c;u.copy(l),e.push(u)}else{const u=new c;a.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new c;a.lerp(l,i/(i-o),u),e.push(u),e.push(l)}a=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,l,d,u,h=new c;for(let p=0;p<i.length;p++){h.copy(i[p]),e.vmult(h,h),t.vadd(h,h);const f=h;(o===void 0||f.x<o)&&(o=f.x),(l===void 0||f.x>l)&&(l=f.x),(r===void 0||f.y<r)&&(r=f.y),(d===void 0||f.y>d)&&(d=f.y),(a===void 0||f.z<a)&&(a=f.z),(u===void 0||f.z>u)&&(u=f.z)}s.set(o,r,a),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new c;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const a=e[s[o][0]],l=new c;t.vsub(a,l);const d=r.dot(l),u=new c;i.vsub(a,u);const h=r.dot(u);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=De;let a=0,l=0;const d=Ye,u=t.vertices;d.setZero(),j.vectorToLocalFrame(s,n,e,r),j.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=a=u[0].dot(r);for(let p=1;p<o;p++){const f=u[p].dot(r);f>a&&(a=f),f<l&&(l=f)}if(l-=h,a-=h,l>a){const p=l;l=a,a=p}i[0]=a,i[1]=l}}const Ft=[],It=[];new c;const De=new c,Ye=new c;class Bt extends N{constructor(t){super({type:N.types.BOX});this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new mt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Bt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ot.set(i[o][0],i[o][1],i[o][2]),e.vmult(ot,ot),t.vadd(ot,ot),s(ot.x,ot.y,ot.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;K[0].set(i.x,i.y,i.z),K[1].set(-i.x,i.y,i.z),K[2].set(-i.x,-i.y,i.z),K[3].set(-i.x,-i.y,-i.z),K[4].set(i.x,-i.y,-i.z),K[5].set(i.x,i.y,-i.z),K[6].set(-i.x,i.y,-i.z),K[7].set(i.x,-i.y,i.z);const o=K[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=K[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,d=a.y,u=a.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ot=new c,K=[new c,new c,new c,new c,new c,new c,new c,new c],Ot={DYNAMIC:1,STATIC:2,KINEMATIC:4},jt={AWAKE:0,SLEEPY:1,SLEEPING:2};class B extends he{constructor(t){t===void 0&&(t={});super();this.id=B.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?B.STATIC:B.DYNAMIC,typeof t.type==typeof B.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep!="undefined"?t.allowSleep:!0,this.sleepState=B.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit!="undefined"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit!="undefined"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation!="undefined"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping!="undefined"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new X,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=B.AWAKE,this.wakeUpAfterNarrowphase=!1,t===B.SLEEPING&&this.dispatchEvent(B.wakeupEvent)}sleep(){this.sleepState=B.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===B.AWAKE&&s<n?(this.sleepState=B.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(B.sleepyEvent)):e===B.SLEEPY&&s>n?this.wakeUp():e===B.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(B.sleepEvent))}}updateSolveMassProperties(){this.sleepState===B.SLEEPING||this.type===B.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Ue,o=Xe,r=this.quaternion,a=this.aabb,l=$e;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ze,n=Ke;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==B.DYNAMIC)return;this.sleepState===B.SLEEPING&&this.wakeUp();const s=Qe;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==B.DYNAMIC)return;const s=ts,n=es;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===B.DYNAMIC&&(this.sleepState===B.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==B.DYNAMIC)return;this.sleepState===B.SLEEPING&&this.wakeUp();const s=e,n=ss;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ns;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==B.DYNAMIC)return;const s=is,n=os;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=rs;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Bt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===B.DYNAMIC||this.type===B.KINEMATIC)||this.sleepState===B.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,p=d*t;n.x+=r.x*p*h.x,n.y+=r.y*p*h.y,n.z+=r.z*p*h.z;const f=u.elements,y=this.angularFactor,m=a.x*y.x,w=a.y*y.y,v=a.z*y.z;i.x+=t*(f[0]*m+f[1]*w+f[2]*v),i.y+=t*(f[3]*m+f[4]*w+f[5]*v),i.z+=t*(f[6]*m+f[7]*w+f[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}B.idCounter=0;B.COLLIDE_EVENT_NAME="collide";B.DYNAMIC=Ot.DYNAMIC;B.STATIC=Ot.STATIC;B.KINEMATIC=Ot.KINEMATIC;B.AWAKE=jt.AWAKE;B.SLEEPY=jt.SLEEPY;B.SLEEPING=jt.SLEEPING;B.wakeupEvent={type:"wakeup"};B.sleepyEvent={type:"sleepy"};B.sleepEvent={type:"sleep"};const Ue=new c,Xe=new G,$e=new X,Ze=new Z,Ke=new Z,Je=new Z,Qe=new c,ts=new c,es=new c,ss=new c,ns=new c,is=new c,os=new c,rs=new c;class de{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&B.STATIC)!==0||t.sleepState===B.SLEEPING)&&((e.type&B.STATIC)!==0||e.sleepState===B.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=cs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=as,n=ls,i=hs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,l=i[r].id,d=a<l?`${a},${l}`:`${l},${a}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(n[l]),e.push(i[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const cs=new c;new c;new G;new c;const as={keys:[]},ls=[],hs=[];new c;new c;new c;class ds extends de{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let l=0;l!==a;l++)o=n[a],r=n[l],!!this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class At{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ue,pe,fe,ve,me,ye,we;const Wt={CLOSEST:1,ANY:2,ALL:4};ue=N.types.SPHERE;pe=N.types.PLANE;fe=N.types.BOX;ve=N.types.CYLINDER;me=N.types.CONVEXPOLYHEDRON;ye=N.types.HEIGHTFIELD;we=N.types.TRIMESH;class V{get[ue](){return this._intersectSphere}get[pe](){return this._intersectPlane}get[fe](){return this._intersectBox}get[ve](){return this._intersectConvex}get[me](){return this._intersectConvex}get[ye](){return this._intersectHeightfield}get[we](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=V.ANY,this.result=new At,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||V.ANY,this.result=e.result||new At,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask!="undefined"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup!="undefined"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse!="undefined"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Zt),_t.length=0,t.broadphase.aabbQuery(t,Zt,_t),this.intersectBodies(_t),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=us,i=ps;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(As(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,l=new c(0,0,1);e.vmult(l,l);const d=new c;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const p=l.dot(a);if(Math.abs(p)<this.precision)return;const f=new c,y=new c,m=new c;o.vsub(s,f);const w=-l.dot(f)/p;a.scale(w,y),o.vadd(y,m),this.reportIntersection(l,m,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=fs;o.from.copy(this.from),o.to.copy(this.to),j.pointToLocalFrame(s,e,o.from,o.from),j.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=vs;let a,l,d,u;a=l=0,d=u=t.data.length-1;const h=new X;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let p=a;p<d;p++)for(let f=l;f<u;f++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(p,f,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(p,f,!1),j.pointToWorldFrame(s,e,t.pillarOffset,Et),this._intersectConvex(t.pillarConvex,e,Et,n,i,Kt),this.result.shouldStop)return;t.getConvexTrianglePillar(p,f,!0),j.pointToWorldFrame(s,e,t.pillarOffset,Et),this._intersectConvex(t.pillarConvex,e,Et,n,i,Kt)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=d**2-4*l*u,p=ms,f=ys;if(!(h<0))if(h===0)o.lerp(r,h,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1);else{const y=(-d-Math.sqrt(h))/(2*l),m=(-d+Math.sqrt(h))/(2*l);if(y>=0&&y<=1&&(o.lerp(r,y,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1)),this.result.shouldStop)return;m>=0&&m<=1&&(o.lerp(r,m,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=ws,a=Jt,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,p=this.direction,f=this.from,y=this.to,m=f.distanceTo(y),w=l?l.length:d.length,v=this.result;for(let g=0;!v.shouldStop&&g<w;g++){const x=l?l[g]:g,b=d[x],C=h[x],A=e,P=s;a.copy(u[b[0]]),A.vmult(a,a),a.vadd(P,a),a.vsub(f,a),A.vmult(C,r);const _=p.dot(r);if(Math.abs(_)<this.precision)continue;const T=r.dot(a)/_;if(!(T<0)){p.scale(T,U),U.vadd(f,U),$.copy(u[b[0]]),A.vmult($,$),P.vadd($,$);for(let I=1;!v.shouldStop&&I<b.length-1;I++){J.copy(u[b[I]]),Q.copy(u[b[I+1]]),A.vmult(J,J),A.vmult(Q,Q),P.vadd(J,J),P.vadd(Q,Q);const L=U.distanceTo(f);!(V.pointInTriangle(U,$,J,Q)||V.pointInTriangle(U,J,$,Q))||L>m||this.reportIntersection(r,U,i,n,x)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=xs,a=Ss,l=Ms,d=Jt,u=gs,h=bs,p=Es,f=Cs,y=zs,m=t.indices;t.vertices;const w=this.from,v=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),j.vectorToLocalFrame(s,e,g,u),j.pointToLocalFrame(s,e,w,h),j.pointToLocalFrame(s,e,v,p),p.x*=t.scale.x,p.y*=t.scale.y,p.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,p.vsub(h,u),u.normalize();const x=h.distanceSquared(p);t.tree.rayQuery(this,l,a);for(let b=0,C=a.length;!this.result.shouldStop&&b!==C;b++){const A=a[b];t.getNormal(A,r),t.getVertex(m[A*3],$),$.vsub(h,d);const P=u.dot(r),_=r.dot(d)/P;if(_<0)continue;u.scale(_,U),U.vadd(h,U),t.getVertex(m[A*3+1],J),t.getVertex(m[A*3+2],Q);const T=U.distanceSquared(h);!(V.pointInTriangle(U,J,$,Q)||V.pointInTriangle(U,$,J,Q))||T>x||(j.vectorToWorldFrame(e,r,y),j.pointToWorldFrame(s,e,U,f),this.reportIntersection(y,f,i,n,A))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i!="undefined"?i:-1,this.mode){case V.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,a),l.hasHit=!0,this.callback(l);break;case V.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a));break;case V.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,ct),s.vsub(e,ut),t.vsub(e,Rt);const i=ct.dot(ct),o=ct.dot(ut),r=ct.dot(Rt),a=ut.dot(ut),l=ut.dot(Rt);let d,u;return(d=a*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*a-o*o}}V.CLOSEST=Wt.CLOSEST;V.ANY=Wt.ANY;V.ALL=Wt.ALL;const Zt=new X,_t=[],ut=new c,Rt=new c,us=new c,ps=new G,U=new c,$=new c,J=new c,Q=new c;new c;new At;const Kt={faceList:[0]},Et=new c,fs=new V,vs=[],ms=new c,ys=new c,ws=new c;new c;new c;const Jt=new c,xs=new c,gs=new c,bs=new c,Es=new c,zs=new c,Cs=new c;new X;const Ss=[],Ms=new j,ct=new c,zt=new c;function As(O,t,e){e.vsub(O,ct);const s=ct.dot(t);return t.scale(s,zt),zt.vadd(O,zt),e.distanceTo(zt)}class dt extends de{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,a=n+o;return i-r<a}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super();this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const l=n[r];for(a=r+1;a<i;a++){const d=n[a];if(!!this.needBroadphaseCollision(l,d)){if(!dt.checkBounds(l,d,o))break;this.intersectionTest(l,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?dt.insertionSortX(t):e===1?dt.insertionSortY(t):e===2&&dt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,a=r.length,l=1/a;for(let p=0;p!==a;p++){const f=r[p],y=f.position.x;t+=y,e+=y*y;const m=f.position.y;s+=m,n+=m*m;const w=f.position.z;i+=w,o+=w*w}const d=e-t*t*l,u=n-s*s*l,h=o-i*i*l;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const a=o[r];a.aabbNeedsUpdate&&a.updateAABB(),a.aabb.overlaps(e)&&s.push(a)}return s}}class Bs{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Qt{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class yt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=yt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Qt,this.jacobianElementB=new Qt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,te),r.scale(d,ee),s.invInertiaWorldSolve.vmult(o,se),n.invInertiaWorldSolve.vmult(a,ne),t.multiplyVectors(te,se)+e.multiplyVectors(ee,ne)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Ct),l+=Ct.dot(t.rotational),a.vmult(e.rotational,Ct),l+=Ct.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Ns;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}yt.idCounter=0;const te=new c,ee=new c,se=new c,ne=new c,Ct=new c,Ns=new c;class Ts extends yt{constructor(t,e,s){s===void 0&&(s=1e6);super(t,e,0,s);this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=Ps,l=Fs,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,p=i.angularVelocity;i.force,i.torque;const f=Is,y=this.jacobianElementA,m=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(y.spatial),a.negate(y.rotational),m.spatial.copy(w),m.rotational.copy(l),f.copy(i.position),f.vadd(r,f),f.vsub(n.position,f),f.vsub(o,f);const v=w.dot(f),g=this.restitution+1,x=g*h.dot(w)-g*d.dot(w)+p.dot(l)-u.dot(a),b=this.computeGiMf();return-v*e-x*s-t*b}getImpactVelocityAlongNormal(){const t=_s,e=Rs,s=qs,n=Ls,i=Os;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Ps=new c,Fs=new c,Is=new c,_s=new c,Rs=new c,qs=new c,Ls=new c,Os=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class ie extends yt{constructor(t,e,s){super(t,e,-s,s);this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=js,o=Ws,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const js=new c,Ws=new c;class wt{constructor(t,e,s){s=Bs.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=wt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}wt.idCounter=0;class xt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=xt.idCounter++,this.friction=typeof t.friction!="undefined"?t.friction:-1,this.restitution=typeof t.restitution!="undefined"?t.restitution:-1}}xt.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new V;new c;new c;new c;new c(1,0,0),new c(0,1,0),new c(0,0,1);new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class ks extends N{constructor(){super({type:N.types.PLANE});this.worldNormal=new c,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new c),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){tt.set(0,0,1),e.vmult(tt,tt);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),tt.x===1?n.x=t.x:tt.x===-1&&(s.x=t.x),tt.y===1?n.y=t.y:tt.y===-1&&(s.y=t.y),tt.z===1?n.z=t.z:tt.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const tt=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new X;new c;new X;new c;new c;new c;new c;new c;new c;new c;new X;new c;new j;new X;class Vs{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Gs extends Vs{constructor(){super();this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,d=t;let u,h,p,f,y,m;if(r!==0)for(let x=0;x!==l;x++)a[x].updateSolveMassProperties();const w=Ds,v=Ys,g=Hs;w.length=r,v.length=r,g.length=r;for(let x=0;x!==r;x++){const b=o[x];g[x]=0,v[x]=b.computeB(d),w[x]=1/b.computeC()}if(r!==0){for(let C=0;C!==l;C++){const A=a[C],P=A.vlambda,_=A.wlambda;P.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){f=0;for(let C=0;C!==r;C++){const A=o[C];u=v[C],h=w[C],m=g[C],y=A.computeGWlambda(),p=h*(u-y-A.eps*m),m+p<A.minForce?p=A.minForce-m:m+p>A.maxForce&&(p=A.maxForce-m),g[C]+=p,f+=p>0?p:-p,A.addToWlambda(p)}if(f*f<i)break}for(let C=0;C!==l;C++){const A=a[C],P=A.velocity,_=A.angularVelocity;A.vlambda.vmul(A.linearFactor,A.vlambda),P.vadd(A.vlambda,P),A.wlambda.vmul(A.angularFactor,A.wlambda),_.vadd(A.wlambda,_)}let x=o.length;const b=1/d;for(;x--;)o[x].multiplier=g[x]*b}return s}}const Hs=[],Ds=[],Ys=[];B.STATIC;class Us{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Xs extends Us{constructor(){super(...arguments);this.type=c}constructObject(){return new c}}const k={sphereSphere:N.types.SPHERE,spherePlane:N.types.SPHERE|N.types.PLANE,boxBox:N.types.BOX|N.types.BOX,sphereBox:N.types.SPHERE|N.types.BOX,planeBox:N.types.PLANE|N.types.BOX,convexConvex:N.types.CONVEXPOLYHEDRON,sphereConvex:N.types.SPHERE|N.types.CONVEXPOLYHEDRON,planeConvex:N.types.PLANE|N.types.CONVEXPOLYHEDRON,boxConvex:N.types.BOX|N.types.CONVEXPOLYHEDRON,sphereHeightfield:N.types.SPHERE|N.types.HEIGHTFIELD,boxHeightfield:N.types.BOX|N.types.HEIGHTFIELD,convexHeightfield:N.types.CONVEXPOLYHEDRON|N.types.HEIGHTFIELD,sphereParticle:N.types.PARTICLE|N.types.SPHERE,planeParticle:N.types.PLANE|N.types.PARTICLE,boxParticle:N.types.BOX|N.types.PARTICLE,convexParticle:N.types.PARTICLE|N.types.CONVEXPOLYHEDRON,cylinderCylinder:N.types.CYLINDER,sphereCylinder:N.types.SPHERE|N.types.CYLINDER,planeCylinder:N.types.PLANE|N.types.CYLINDER,boxCylinder:N.types.BOX|N.types.CYLINDER,convexCylinder:N.types.CONVEXPOLYHEDRON|N.types.CYLINDER,heightfieldCylinder:N.types.HEIGHTFIELD|N.types.CYLINDER,particleCylinder:N.types.PARTICLE|N.types.CYLINDER,sphereTrimesh:N.types.SPHERE|N.types.TRIMESH,planeTrimesh:N.types.PLANE|N.types.TRIMESH};class $s{get[k.sphereSphere](){return this.sphereSphere}get[k.spherePlane](){return this.spherePlane}get[k.boxBox](){return this.boxBox}get[k.sphereBox](){return this.sphereBox}get[k.planeBox](){return this.planeBox}get[k.convexConvex](){return this.convexConvex}get[k.sphereConvex](){return this.sphereConvex}get[k.planeConvex](){return this.planeConvex}get[k.boxConvex](){return this.boxConvex}get[k.sphereHeightfield](){return this.sphereHeightfield}get[k.boxHeightfield](){return this.boxHeightfield}get[k.convexHeightfield](){return this.convexHeightfield}get[k.sphereParticle](){return this.sphereParticle}get[k.planeParticle](){return this.planeParticle}get[k.boxParticle](){return this.boxParticle}get[k.convexParticle](){return this.convexParticle}get[k.cylinderCylinder](){return this.convexConvex}get[k.sphereCylinder](){return this.sphereConvex}get[k.planeCylinder](){return this.planeConvex}get[k.boxCylinder](){return this.boxConvex}get[k.convexCylinder](){return this.convexConvex}get[k.heightfieldCylinder](){return this.heightfieldCylinder}get[k.particleCylinder](){return this.particleCylinder}get[k.sphereTrimesh](){return this.sphereTrimesh}get[k.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Xs,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Ts(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*r.gravity.length();let p=s.invMass+n.invMass;p>0&&(p=1/p);const f=this.frictionEquationPool,y=f.length?f.pop():new ie(s,n,h*p),m=f.length?f.pop():new ie(s,n,h*p);return y.bi=m.bi=s,y.bj=m.bj=n,y.minForce=m.minForce=-h*p,y.maxForce=m.maxForce=h*p,y.ri.copy(t.ri),y.rj.copy(t.rj),m.ri.copy(t.ri),m.rj.copy(t.rj),t.ni.tangents(y.t,m.t),y.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),y.enabled=m.enabled=t.enabled,e.push(y,m),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];rt.setZero(),lt.setZero(),ht.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(rt.vadd(e.ni,rt),lt.vadd(e.ri,lt),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),lt.vadd(e.rj,lt),ht.vadd(e.ri,ht));const o=1/t;lt.scale(o,s.ri),ht.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=Js,l=Qs,d=Zs,u=Ks;for(let h=0,p=t.length;h!==p;h++){const f=t[h],y=e[h];let m=null;f.material&&y.material&&(m=s.getContactMaterial(f.material,y.material)||null);const w=f.type&B.KINEMATIC&&y.type&B.STATIC||f.type&B.STATIC&&y.type&B.KINEMATIC||f.type&B.KINEMATIC&&y.type&B.KINEMATIC;for(let v=0;v<f.shapes.length;v++){f.quaternion.mult(f.shapeOrientations[v],a),f.quaternion.vmult(f.shapeOffsets[v],d),d.vadd(f.position,d);const g=f.shapes[v];for(let x=0;x<y.shapes.length;x++){y.quaternion.mult(y.shapeOrientations[x],l),y.quaternion.vmult(y.shapeOffsets[x],u),u.vadd(y.position,u);const b=y.shapes[x];if(!(g.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&g.collisionFilterGroup)||d.distanceTo(u)>g.boundingSphereRadius+b.boundingSphereRadius)continue;let C=null;g.material&&b.material&&(C=s.getContactMaterial(g.material,b.material)||null),this.currentContactMaterial=C||m||s.defaultContactMaterial;const A=g.type|b.type,P=this[A];if(P){let _=!1;g.type<b.type?_=P.call(this,g,b,d,u,a,l,f,y,g,b,w):_=P.call(this,b,g,u,d,l,a,y,f,g,b,w),_&&w&&(s.shapeOverlapKeeper.set(g.id,b.id),s.bodyOverlapKeeper.set(f.id,y.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,l,d,u){const h=this.createContactEquation(r,a,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,St),h.ni.scale(h.ni.dot(St),oe),St.vsub(oe,h.rj),-St.dot(h.ni)<=t.radius){if(u)return!0;const p=h.ri,f=h.rj;p.vadd(s,p),p.vsub(r.position,p),f.vadd(n,f),f.vsub(a.position,f),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}sphereBox(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool,p=Mn;s.vsub(n,Mt),e.getSideNormals(p,o);const f=t.radius;let y=!1;const m=Bn,w=Nn,v=Tn;let g=null,x=0,b=0,C=0,A=null;for(let z=0,W=p.length;z!==W&&y===!1;z++){const q=zn;q.copy(p[z]);const R=q.length();q.normalize();const Y=Mt.dot(q);if(Y<R+f&&Y>0){const D=Cn,F=Sn;D.copy(p[(z+1)%3]),F.copy(p[(z+2)%3]);const at=D.length(),gt=F.length();D.normalize(),F.normalize();const Nt=Mt.dot(D),Tt=Mt.dot(F);if(Nt<at&&Nt>-at&&Tt<gt&&Tt>-gt){const kt=Math.abs(Y-R-f);if((A===null||kt<A)&&(A=kt,b=Nt,C=Tt,g=R,m.copy(q),w.copy(D),v.copy(F),x++,u))return!0}}}if(x){y=!0;const z=this.createContactEquation(r,a,t,e,l,d);m.scale(-f,z.ri),z.ni.copy(m),z.ni.negate(z.ni),m.scale(g,m),w.scale(b,w),m.vadd(w,m),v.scale(C,v),m.vadd(v,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(a.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let P=h.get();const _=An;for(let z=0;z!==2&&!y;z++)for(let W=0;W!==2&&!y;W++)for(let q=0;q!==2&&!y;q++)if(P.set(0,0,0),z?P.vadd(p[0],P):P.vsub(p[0],P),W?P.vadd(p[1],P):P.vsub(p[1],P),q?P.vadd(p[2],P):P.vsub(p[2],P),n.vadd(P,_),_.vsub(s,_),_.lengthSquared()<f*f){if(u)return!0;y=!0;const R=this.createContactEquation(r,a,t,e,l,d);R.ri.copy(_),R.ri.normalize(),R.ni.copy(R.ri),R.ri.scale(f,R.ri),R.rj.copy(P),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(a.position,R.rj),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}h.release(P),P=null;const T=h.get(),I=h.get(),L=h.get(),E=h.get(),M=h.get(),S=p.length;for(let z=0;z!==S&&!y;z++)for(let W=0;W!==S&&!y;W++)if(z%3!==W%3){p[W].cross(p[z],T),T.normalize(),p[z].vadd(p[W],I),L.copy(s),L.vsub(I,L),L.vsub(n,L);const q=L.dot(T);T.scale(q,E);let R=0;for(;R===z%3||R===W%3;)R++;M.copy(s),M.vsub(E,M),M.vsub(I,M),M.vsub(n,M);const Y=Math.abs(q),D=M.length();if(Y<p[R].length()&&D<f){if(u)return!0;y=!0;const F=this.createContactEquation(r,a,t,e,l,d);I.vadd(E,F.rj),F.rj.copy(F.rj),M.negate(F.ni),F.ni.normalize(),F.ri.copy(F.rj),F.ri.vadd(n,F.ri),F.ri.vsub(s,F.ri),F.ri.normalize(),F.ri.scale(f,F.ri),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(a.position,F.rj),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult)}}h.release(T,I,L,E,M)}planeBox(t,e,s,n,i,o,r,a,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}convexConvex(t,e,s,n,i,o,r,a,l,d,u,h,p){const f=Dn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,f,h,p)){const y=[],m=Yn;t.clipAgainstHull(s,i,e,n,o,f,-100,100,y);let w=0;for(let v=0;v!==y.length;v++){if(u)return!0;const g=this.createContactEquation(r,a,t,e,l,d),x=g.ri,b=g.rj;f.negate(g.ni),y[v].normal.negate(m),m.scale(y[v].depth,m),y[v].point.vadd(m,x),b.copy(y[v].point),x.vsub(s,x),b.vsub(n,b),x.vadd(s,x),x.vsub(r.position,x),b.vadd(n,b),b.vsub(a.position,b),this.result.push(g),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool;s.vsub(n,Pn);const p=e.faceNormals,f=e.faces,y=e.vertices,m=t.radius;let w=!1;for(let v=0;v!==y.length;v++){const g=y[v],x=Rn;o.vmult(g,x),n.vadd(x,x);const b=_n;if(x.vsub(s,b),b.lengthSquared()<m*m){if(u)return!0;w=!0;const C=this.createContactEquation(r,a,t,e,l,d);C.ri.copy(b),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(m,C.ri),x.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let v=0,g=f.length;v!==g&&w===!1;v++){const x=p[v],b=f[v],C=qn;o.vmult(x,C);const A=Ln;o.vmult(y[b[0]],A),A.vadd(n,A);const P=On;C.scale(-m,P),s.vadd(P,P);const _=jn;P.vsub(A,_);const T=_.dot(C),I=Wn;if(s.vsub(A,I),T<0&&I.dot(C)>0){const L=[];for(let E=0,M=b.length;E!==M;E++){const S=h.get();o.vmult(y[b[E]],S),n.vadd(S,S),L.push(S)}if(En(L,C,s)){if(u)return!0;w=!0;const E=this.createContactEquation(r,a,t,e,l,d);C.scale(-m,E.ri),C.negate(E.ni);const M=h.get();C.scale(-T,M);const S=h.get();C.scale(-m,S),s.vsub(n,E.rj),E.rj.vadd(S,E.rj),E.rj.vadd(M,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(a.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(M),h.release(S),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let z=0,W=L.length;z!==W;z++)h.release(L[z]);return}else for(let E=0;E!==b.length;E++){const M=h.get(),S=h.get();o.vmult(y[b[(E+1)%b.length]],M),o.vmult(y[b[(E+2)%b.length]],S),n.vadd(M,M),n.vadd(S,S);const z=Fn;S.vsub(M,z);const W=In;z.unit(W);const q=h.get(),R=h.get();s.vsub(M,R);const Y=R.dot(W);W.scale(Y,q),q.vadd(M,q);const D=h.get();if(q.vsub(s,D),Y>0&&Y*Y<z.lengthSquared()&&D.lengthSquared()<m*m){if(u)return!0;const F=this.createContactEquation(r,a,t,e,l,d);q.vsub(n,F.rj),q.vsub(s,F.ni),F.ni.normalize(),F.ni.scale(m,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(a.position,F.rj),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult);for(let at=0,gt=L.length;at!==gt;at++)h.release(L[at]);h.release(M),h.release(S),h.release(q),h.release(D),h.release(R);return}h.release(M),h.release(S),h.release(q),h.release(D),h.release(R)}for(let E=0,M=L.length;E!==M;E++)h.release(L[E])}}}planeConvex(t,e,s,n,i,o,r,a,l,d,u){const h=kn,p=Vn;p.set(0,0,1),i.vmult(p,p);let f=0;const y=Gn;for(let m=0;m!==e.vertices.length;m++)if(h.copy(e.vertices[m]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,y),p.dot(y)<=0){if(u)return!0;const v=this.createContactEquation(r,a,t,e,l,d),g=Hn;p.scale(p.dot(y),g),h.vsub(g,g),g.vsub(s,v.ri),v.ni.copy(p),h.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(a.position,v.rj),this.result.push(v),f++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&f&&this.createFrictionFromAverage(f)}boxConvex(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,p=t.radius,f=e.elementSize,y=ii,m=ni;j.pointToLocalFrame(n,o,s,m);let w=Math.floor((m.x-p)/f)-1,v=Math.ceil((m.x+p)/f)+1,g=Math.floor((m.y-p)/f)-1,x=Math.ceil((m.y+p)/f)+1;if(v<0||x<0||w>h.length||g>h[0].length)return;w<0&&(w=0),v<0&&(v=0),g<0&&(g=0),x<0&&(x=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),x>=h[0].length&&(x=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const b=[];e.getRectMinMax(w,g,v,x,b);const C=b[0],A=b[1];if(m.z-p>A||m.z+p<C)return;const P=this.result;for(let _=w;_<v;_++)for(let T=g;T<x;T++){const I=P.length;let L=!1;if(e.getConvexTrianglePillar(_,T,!1),j.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,a,t,e,u)),u&&L||(e.getConvexTrianglePillar(_,T,!0),j.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,a,t,e,u)),u&&L))return!0;if(P.length-I>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,p=e.elementSize,f=t.boundingSphereRadius,y=ei,m=si,w=ti;j.pointToLocalFrame(n,o,s,w);let v=Math.floor((w.x-f)/p)-1,g=Math.ceil((w.x+f)/p)+1,x=Math.floor((w.y-f)/p)-1,b=Math.ceil((w.y+f)/p)+1;if(g<0||b<0||v>h.length||x>h[0].length)return;v<0&&(v=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),v>=h.length&&(v=h.length-1),g>=h.length&&(g=h.length-1),b>=h[0].length&&(b=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const C=[];e.getRectMinMax(v,x,g,b,C);const A=C[0],P=C[1];if(!(w.z-f>P||w.z+f<A))for(let _=v;_<g;_++)for(let T=x;T<b;T++){let I=!1;if(e.getConvexTrianglePillar(_,T,!1),j.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,a,null,null,u,m,null)),u&&I||(e.getConvexTrianglePillar(_,T,!0),j.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,a,null,null,u,m,null)),u&&I))return!0}}sphereParticle(t,e,s,n,i,o,r,a,l,d,u){const h=Zn;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const f=this.createContactEquation(a,r,e,t,l,d);h.normalize(),f.rj.copy(h),f.rj.scale(t.radius,f.rj),f.ni.copy(h),f.ni.negate(f.ni),f.ri.set(0,0,0),this.result.push(f),this.createFrictionEquationsFromContact(f,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,l,d,u){const h=Un;h.set(0,0,1),r.quaternion.vmult(h,h);const p=Xn;if(n.vsub(r.position,p),h.dot(p)<=0){if(u)return!0;const y=this.createContactEquation(a,r,e,t,l,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const m=$n;h.scale(h.dot(n),m),n.vsub(m,m),y.rj.copy(m),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexParticle(t,e,s,n,i,o,r,a,l,d,u){let h=-1;const p=Jn,f=Qn;let y=null;const m=Kn;if(m.copy(n),m.vsub(s,m),i.conjugate(re),re.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const g=[t.worldVertices[t.faces[w][0]]],x=t.worldFaceNormals[w];n.vsub(g[0],ce);const b=-x.dot(ce);if(y===null||Math.abs(b)<Math.abs(y)){if(u)return!0;y=b,h=w,p.copy(x)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,l,d);p.scale(y,f),f.vadd(n,f),f.vsub(s,f),w.rj.copy(f),p.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,g=w.rj;v.vadd(n,v),v.vsub(a.position,v),g.vadd(s,g),g.vsub(r.position,g),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,a,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexParticle(e,t,n,s,o,i,a,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=an,p=ln,f=hn,y=dn,m=un,w=pn,v=yn,g=cn,x=on,b=wn;j.pointToLocalFrame(n,o,s,m);const C=t.radius;v.lowerBound.set(m.x-C,m.y-C,m.z-C),v.upperBound.set(m.x+C,m.y+C,m.z+C),e.getTrianglesInAABB(v,b);const A=rn,P=t.radius*t.radius;for(let E=0;E<b.length;E++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[b[E]*3+M],A),A.vsub(m,x),x.lengthSquared()<=P){if(g.copy(A),j.pointToWorldFrame(n,o,g,A),A.vsub(s,x),u)return!0;let S=this.createContactEquation(r,a,t,e,l,d);S.ni.copy(x),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(A),S.rj.vsub(a.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let E=0;E<b.length;E++)for(let M=0;M<3;M++){e.getVertex(e.indices[b[E]*3+M],h),e.getVertex(e.indices[b[E]*3+(M+1)%3],p),p.vsub(h,f),m.vsub(p,w);const S=w.dot(f);m.vsub(h,w);let z=w.dot(f);if(z>0&&S<0&&(m.vsub(h,w),y.copy(f),y.normalize(),z=w.dot(y),y.scale(z,w),w.vadd(h,w),w.distanceTo(m)<t.radius)){if(u)return!0;const q=this.createContactEquation(r,a,t,e,l,d);w.vsub(m,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(a.position,q.rj),j.vectorToWorldFrame(o,q.ni,q.ni),j.vectorToWorldFrame(o,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const _=fn,T=vn,I=mn,L=nn;for(let E=0,M=b.length;E!==M;E++){e.getTriangleVertices(b[E],_,T,I),e.getNormal(b[E],L),m.vsub(_,w);let S=w.dot(L);if(L.scale(S,w),m.vsub(w,w),S=w.distanceTo(m),V.pointInTriangle(w,_,T,I)&&S<t.radius){if(u)return!0;let z=this.createContactEquation(r,a,t,e,l,d);w.vsub(m,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(a.position,z.rj),j.vectorToWorldFrame(o,z.ni,z.ni),j.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=new c,p=tn;p.set(0,0,1),i.vmult(p,p);for(let f=0;f<e.vertices.length/3;f++){e.getVertex(f,h);const y=new c;y.copy(h),j.pointToWorldFrame(n,o,y,h);const m=en;if(h.vsub(s,m),p.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,a,t,e,l,d);v.ni.copy(p);const g=sn;p.scale(m.dot(p),g),h.vsub(g,g),v.ri.copy(g),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(a.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const rt=new c,lt=new c,ht=new c,Zs=new c,Ks=new c,Js=new G,Qs=new G,tn=new c,en=new c,sn=new c,nn=new c,on=new c;new c;const rn=new c,cn=new c,an=new c,ln=new c,hn=new c,dn=new c,un=new c,pn=new c,fn=new c,vn=new c,mn=new c,yn=new X,wn=[],St=new c,oe=new c,xn=new c,gn=new c,bn=new c;function En(O,t,e){let s=null;const n=O.length;for(let i=0;i!==n;i++){const o=O[i],r=xn;O[(i+1)%n].vsub(o,r);const a=gn;r.cross(t,a);const l=bn;e.vsub(o,l);const d=a.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Mt=new c,zn=new c,Cn=new c,Sn=new c,Mn=[new c,new c,new c,new c,new c,new c],An=new c,Bn=new c,Nn=new c,Tn=new c,Pn=new c,Fn=new c,In=new c,_n=new c,Rn=new c,qn=new c,Ln=new c,On=new c,jn=new c,Wn=new c;new c;new c;const kn=new c,Vn=new c,Gn=new c,Hn=new c,Dn=new c,Yn=new c,Un=new c,Xn=new c,$n=new c,Zn=new c,re=new G,Kn=new c;new c;const Jn=new c,ce=new c,Qn=new c,ti=new c,ei=new c,si=[0],ni=new c,ii=new c;class ae{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let l=!1;const d=s[a];for(;d>n[r];)r++;l=d===n[r],l||le(t,d)}r=0;for(let a=0;a<o;a++){let l=!1;const d=n[a];for(;d>s[r];)r++;l=s[r]===d,l||le(e,d)}}}function le(O,t){O.push((t&4294901760)>>16,t&65535)}const qt=(O,t)=>O<t?`${O}-${t}`:`${t}-${O}`;class oi{constructor(){this.data={keys:[]}}get(t,e){const s=qt(t,e);return this.data[s]}set(t,e,s){const n=qt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=qt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class ri extends he{constructor(t){t===void 0&&(t={});super();this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=t.broadphase!==void 0?t.broadphase:new ds,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Gs,this.constraints=[],this.narrowphase=new $s(this),this.collisionMatrix=new Xt,this.collisionMatrixPrevious=new Xt,this.bodyOverlapKeeper=new ae,this.shapeOverlapKeeper=new ae,this.contactmaterials=[],this.contactMaterialTable=new oi,this.defaultMaterial=new xt("default"),this.defaultContactMaterial=new wt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof At?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=V.ALL,s.from=t,s.to=e,s.callback=n,Lt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=V.ANY,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=V.CLOSEST,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof B&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=H.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=H.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(H.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=di,n=ui,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,d=this.profile,u=B.DYNAMIC;let h=-1/0;const p=this.constraints,f=hi;a.length();const y=a.x,m=a.y,w=a.z;let v=0;for(l&&(h=H.now()),v=0;v!==i;v++){const E=o[v];if(E.type===u){const M=E.force,S=E.mass;M.x+=S*y,M.y+=S*m,M.z+=S*w}}for(let E=0,M=this.subsystems.length;E!==M;E++)this.subsystems[E].update();l&&(h=H.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=H.now()-h);let g=p.length;for(v=0;v!==g;v++){const E=p[v];if(!E.collideConnected)for(let M=s.length-1;M>=0;M-=1)(E.bodyA===s[M]&&E.bodyB===n[M]||E.bodyB===s[M]&&E.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),l&&(h=H.now());const x=li,b=e.length;for(v=0;v!==b;v++)x.push(e[v]);e.length=0;const C=this.frictionEquations.length;for(v=0;v!==C;v++)f.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,x,this.frictionEquations,f),l&&(d.narrowphase=H.now()-h),l&&(h=H.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const A=e.length;for(let E=0;E!==A;E++){const M=e[E],S=M.bi,z=M.bj,W=M.si,q=M.sj;let R;if(S.material&&z.material?R=this.getContactMaterial(S.material,z.material)||this.defaultContactMaterial:R=this.defaultContactMaterial,R.friction,S.material&&z.material&&(S.material.friction>=0&&z.material.friction>=0&&S.material.friction*z.material.friction,S.material.restitution>=0&&z.material.restitution>=0&&(M.restitution=S.material.restitution*z.material.restitution)),r.addEquation(M),S.allowSleep&&S.type===B.DYNAMIC&&S.sleepState===B.SLEEPING&&z.sleepState===B.AWAKE&&z.type!==B.STATIC){const Y=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),D=z.sleepSpeedLimit**2;Y>=D*2&&(S.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===B.DYNAMIC&&z.sleepState===B.SLEEPING&&S.sleepState===B.AWAKE&&S.type!==B.STATIC){const Y=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),D=S.sleepSpeedLimit**2;Y>=D*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,z,!0),this.collisionMatrixPrevious.get(S,z)||(pt.body=z,pt.contact=M,S.dispatchEvent(pt),pt.body=S,z.dispatchEvent(pt)),this.bodyOverlapKeeper.set(S.id,z.id),this.shapeOverlapKeeper.set(W.id,q.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=H.now()-h,h=H.now()),v=0;v!==i;v++){const E=o[v];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(g=p.length,v=0;v!==g;v++){const E=p[v];E.update();for(let M=0,S=E.equations.length;M!==S;M++){const z=E.equations[M];r.addEquation(z)}}r.solve(t,this),l&&(d.solve=H.now()-h),r.removeAllEquations();const P=Math.pow;for(v=0;v!==i;v++){const E=o[v];if(E.type&u){const M=P(1-E.linearDamping,t),S=E.velocity;S.scale(M,S);const z=E.angularVelocity;if(z){const W=P(1-E.angularDamping,t);z.scale(W,z)}}}this.dispatchEvent(ai),l&&(h=H.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,I=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,T,I);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=H.now()-h),this.stepnumber+=1,this.dispatchEvent(ci);let L=!0;if(this.allowSleep)for(L=!1,v=0;v!==i;v++){const E=o[v];E.sleepTick(this.time),E.sleepState!==B.SLEEPING&&(L=!0)}this.hasActiveBodies=L}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(et,st),t){for(let i=0,o=et.length;i<o;i+=2)ft.bodyA=this.getBodyById(et[i]),ft.bodyB=this.getBodyById(et[i+1]),this.dispatchEvent(ft);ft.bodyA=ft.bodyB=null}if(e){for(let i=0,o=st.length;i<o;i+=2)vt.bodyA=this.getBodyById(st[i]),vt.bodyB=this.getBodyById(st[i+1]),this.dispatchEvent(vt);vt.bodyA=vt.bodyB=null}et.length=st.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(et,st),s){for(let i=0,o=et.length;i<o;i+=2){const r=this.getShapeById(et[i]),a=this.getShapeById(et[i+1]);nt.shapeA=r,nt.shapeB=a,r&&(nt.bodyA=r.body),a&&(nt.bodyB=a.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}if(n){for(let i=0,o=st.length;i<o;i+=2){const r=this.getShapeById(st[i]),a=this.getShapeById(st[i+1]);it.shapeA=r,it.shapeB=a,r&&(it.bodyA=r.body),a&&(it.bodyB=a.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new X;const Lt=new V,H=globalThis.performance||{};if(!H.now){let O=Date.now();H.timing&&H.timing.navigationStart&&(O=H.timing.navigationStart),H.now=()=>Date.now()-O}new c;const ci={type:"postStep"},ai={type:"preStep"},pt={type:B.COLLIDE_EVENT_NAME,body:null,contact:null},li=[],hi=[],di=[],ui=[],et=[],st=[],ft={type:"beginContact",bodyA:null,bodyB:null},vt={type:"endContact",bodyA:null,bodyB:null},nt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},it={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};const pi=Oe('<canvas class="webgl" data-v-5c34ee1c></canvas><div id="progressDiv" class="w-full bg-gray-200 h-2 mb-6 absolute top-1/2" data-v-5c34ee1c><div id="progress" class="transition-all duration-200 ease-in-out bg-main-active h-2 w-{{progressRatio}}" data-v-5c34ee1c></div></div><div class="point point-0" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>1</div><div class="text select-none" data-v-5c34ee1c>This is creation of Roy</div></div><div class="point point-1" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>2</div><div class="text select-none" data-v-5c34ee1c>Switch</div></div><div class="point point-2" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>3</div><div class="text select-none" data-v-5c34ee1c>Light Switch</div></div><div class="point point-3" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>4</div><div class="text select-none" data-v-5c34ee1c>Power</div></div><div class="point point-4" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>5</div><div class="text select-none" data-v-5c34ee1c>Elden Ring</div></div><div class="point point-5" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>6</div><div class="text select-none" data-v-5c34ee1c>USB</div></div><div class="point point-6" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>7</div><div class="text select-none" data-v-5c34ee1c>This is creation of Roy</div></div><div class="point point-7" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>8</div><div class="text select-none" data-v-5c34ee1c>This is creation of Roy</div></div><div class="point point-8" data-v-5c34ee1c><div class="label select-none" data-v-5c34ee1c>9</div><div class="text select-none" data-v-5c34ee1c>This is creation of Roy</div></div>',11),fi={setup(O){let t={},e,s,n,i,o,r=Re(0),a,l=!1,d,u,h;const p={width:window.innerWidth,height:window.innerHeight},f=()=>{o.traverse(x=>{x instanceof Pt&&x.material instanceof Gt&&(x.material.envMapIntensity=t.envMapIntensity,x.material.needsUpdate=!0,x.castShadow=!0,x.receiveShadow=!0)})},y=new xe,m=new ge,w={visible:!1};m.add(w,"visible").name("Show tips").onFinishChange(()=>{for(const x of a)x.element.classList.remove("visible")}),t={},t.envMapIntensity=5;const v=new be("#ffffff",3);v.position.set(-13,22.4,14.8),v.castShadow=!0,v.shadow.camera.far=15,v.shadow.mapSize.set(1024,1024),e=new Ee(75,p.width/p.height,.1,100),e.position.set(-20,10,15),qe(()=>{m.destroy()}),Le(()=>{h=new ri({gravity:new c(0,-9.82,0)}),h.broadphase=new dt(h);const x=new xt("default"),b=new wt(x,x,{friction:.1,restitution:.1});h.defaultContactMaterial=b;const C=new c(.01,.0025,.01);u=new B({mass:5,shape:new Bt(C)}),u.position.set(0,10,0),h.addBody(u);const A=new B({type:B.STATIC,shape:new ks});A.quaternion.setFromAxisAngle(new c(-1,0,0),Math.PI*.5),h.addBody(A),i=document.querySelector("canvas.webgl");const P=document.querySelector("#progress"),_=document.querySelector("#progressDiv");a=[{position:new bt(-1.5,-.2,1.5),element:document.querySelector(".point-0")},{position:new bt(.6,-.9,1.7),element:document.querySelector(".point-1")},{position:new bt(1.9,-.9,1.7),element:document.querySelector(".point-2")},{position:new bt(.2,-.9,-5.5),element:document.querySelector(".point-4")}],n=new ze(e,i),n.enableDamping=!0;const T=new Te(()=>{window.setTimeout(()=>{Ie.to(W.uniforms.uAlpha,{duration:1,value:0}),_.style.visibility="hidden",g()},500),window.setTimeout(()=>{l=!0})},(R,Y,D)=>{r.value=Y/D*100,P.style.width=`${r.value}%`}),I=new Pe;I.setDecoderPath("/draco/");const L=new Fe(T);L.setDRACOLoader(I);const M=new Ce().load(["/textures/environmentMaps/0/px.jpg","/textures/environmentMaps/0/nx.jpg","/textures/environmentMaps/0/py.jpg","/textures/environmentMaps/0/ny.jpg","/textures/environmentMaps/0/pz.jpg","/textures/environmentMaps/0/nz.jpg"]);o=new Se,o.add(v),o.add(e),L.load("models/DSPEC_jr/DSPEC_jr.gltf",R=>{R.scene.scale.set(1.5,1.5,1.5),R.scene.position.set(0,10,0),R.scene.rotation.y=0,d=R.scene,o.add(R.scene),f()});const S=new Pt(new Vt(20,20),new Gt({color:"#777777",metalness:.3,roughness:.4,envMap:M}));S.receiveShadow=!0,S.rotation.x=-Math.PI*.5,o.add(S);const z=new Vt(2,2,1,1),W=new Me({transparent:!0,uniforms:{uAlpha:{value:1}},vertexShader:`

    void main(){
        gl_Position = vec4(position, 1.0);
        
    }`,fragmentShader:`
    uniform float uAlpha;

    void main(){
        gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);
    }`}),q=new Pt(z,W);o.add(q),M.encoding=Ht,o.background=M,o.environment=M,s=new Ae({canvas:i,antialias:!0}),s.setSize(p.width,p.height),s.setPixelRatio(window.devicePixelRatio),s.physicallyCorrectLights=!0,s.outputEncoding=Ht,s.toneMapping=Be,s.toneMappingExposure=3,s.shadowMap.enabled=!0,s.shadowMap.type=Ne});const g=()=>{if(n.update(),l&&w.visible)for(const x of a){const b=x.position.clone();b.project(e),y.setFromCamera(b,e);const C=y.intersectObjects(o.children,!0);if(C.length===0)x.element.classList.add("visible");else{const _=C[0].distance,T=x.position.distanceTo(e.position);_<T?x.element.classList.remove("visible"):x.element.classList.add("visible")}const A=b.x*p.width*.5,P=-b.y*p.height*.5;x.element.style.transform=`translateX(${A}px) translateY(${P}px)`}h.fixedStep(),d.position.copy(u.position),d.quaternion.copy(u.quaternion),s.render(o,e),window.requestAnimationFrame(g)};return window.addEventListener("resize",()=>{p.width=window.innerWidth,p.height=window.innerHeight,e.aspect=p.width/p.height,e.updateProjectionMatrix(),s.setSize(p.width,p.height),s.setPixelRatio(Math.min(window.devicePixelRatio,2))}),(x,b)=>pi}};var xi=_e(fi,[["__scopeId","data-v-5c34ee1c"]]);export{xi as default};

import{e as Ie,R as xe,V as yt,f as Y,M as Re,E as _e,a as Ft,B as be,I as qe,g as Le,T as Oe,h as Kt,i as je,S as We,P as ke,j as Ve,D as De,k as Ge,l as Jt,m as It,n as Qt,o as kt,b as He,s as te,W as Ue,p as Ye,q as Xe,O as $e,d as Ze,L as Ke}from"./OrbitControls.3c74ff74.js";import{D as Je,G as Qe,g as ts}from"./index.62bb5d1d.js";import{t as es}from"./tweakpane.0f9fa106.js";import{_ as ss}from"./index.e469dd39.js";import{l as ns,C as is,B as os,p as rs}from"./vendor.69ab715b.js";class Q{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Q);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],c=s[3],u=s[4],d=s[5],h=s[6],f=s[7],p=s[8],m=n[0],y=n[1],w=n[2],v=n[3],x=n[4],g=n[5],b=n[6],C=n[7],M=n[8];return i[0]=o*m+r*v+a*b,i[1]=o*y+r*x+a*C,i[2]=o*w+r*g+a*M,i[3]=c*m+u*v+d*b,i[4]=c*y+u*x+d*C,i[5]=c*w+u*g+d*M,i[6]=h*m+f*v+p*b,i[7]=h*y+f*x+p*C,i[8]=h*w+f*g+p*M,e}scale(t,e){e===void 0&&(e=new Q);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new l);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const c=a;let u;const d=4;let h;do{if(o=c-a,i[o+n*o]===0){for(r=o+1;r<c;r++)if(i[o+n*r]!==0){u=d;do h=d-u,i[h+n*o]+=i[h+n*r];while(--u);break}}if(i[o+n*o]!==0)for(r=o+1;r<c;r++){const f=i[o+n*r]/i[o+n*o];u=d;do h=d-u,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--u)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Q);const e=3,s=6,n=as;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let c;const u=s;let d;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){c=u;do d=u-c,n[d+s*i]+=n[d+s*o];while(--c);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];c=u;do d=u-c,n[d+s*o]=d<=i?0:n[d+s*o]-n[d+s*i]*h;while(--c)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];c=s;do d=s-c,n[d+s*o]=n[d+s*o]-n[d+s*i]*h;while(--c)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];c=s;do d=s-c,n[d+s*i]=n[d+s*i]*h;while(--c)}while(i--);i=2;do{o=2;do{if(d=n[e+o+s*i],isNaN(d)||d===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,d)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,c=e*o,u=e*r,d=e*a,h=s*r,f=s*a,p=n*a,m=i*o,y=i*r,w=i*a,v=this.elements;return v[3*0+0]=1-(h+p),v[3*0+1]=u-w,v[3*0+2]=d+y,v[3*1+0]=u+w,v[3*1+1]=1-(c+p),v[3*1+2]=f-m,v[3*2+0]=d-y,v[3*2+1]=f+m,v[3*2+2]=1-(c+h),this}transpose(t){t===void 0&&(t=new Q);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const as=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new l(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new l(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Q([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new l);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=ls,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=cs;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(ee),ee.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0);l.UNIT_X=new l(1,0,0);l.UNIT_Y=new l(0,1,0);l.UNIT_Z=new l(0,0,1);const ls=new l,cs=new l,ee=new l;class K{constructor(t){t===void 0&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let c=t[a];r&&(r.vmult(c,se),c=se),c.x>o.x&&(o.x=c.x),c.x<i.x&&(i.x=c.x),c.y>o.y&&(o.y=c.y),c.y<i.y&&(i.y=c.y),c.z>o.z&&(o.z=c.z),c.z<i.z&&(i.z=c.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new K().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const c=this.lowerBound,u=this.upperBound;t.copy(c),e.set(u.x,c.y,c.z),s.set(u.x,u.y,c.z),n.set(c.x,u.y,u.z),i.set(u.x,c.y,u.z),o.set(c.x,u.y,c.z),r.set(c.x,c.y,u.z),a.copy(u)}toLocalFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],c=s[5],u=s[6],d=s[7];this.getCorners(n,i,o,r,a,c,u,d);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],c=s[5],u=s[6],d=s[7];this.getCorners(n,i,o,r,a,c,u,d);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,c=(this.lowerBound.y-s.y)*i,u=(this.upperBound.y-s.y)*i,d=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,a),Math.min(c,u)),Math.min(d,h)),p=Math.min(Math.min(Math.max(r,a),Math.max(c,u)),Math.max(d,h));return!(p<0||f>p)}}const se=new l,ne=[new l,new l,new l,new l,new l,new l,new l,new l];class ie{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Ee{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=hs,n=us;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,c=t.z,u=t.w;return e.x=s*u+o*r+n*c-i*a,e.y=n*u+o*a+i*r-s*c,e.z=i*u+o*c+s*a-n*r,e.w=o*u-s*r-n*a-i*c,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,c=this.w,u=c*s+r*i-a*n,d=c*n+a*s-o*i,h=c*i+o*n-r*s,f=-o*s-r*n-a*i;return e.x=u*c+f*-o+d*-a-h*-r,e.y=d*c+f*-r+h*-o-u*-a,e.z=h*c+f*-a+u*-r-d*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,c=this.w;switch(e){case"YZX":const u=o*r+a*c;if(u>.499&&(s=2*Math.atan2(o,c),n=Math.PI/2,i=0),u<-.499&&(s=-2*Math.atan2(o,c),n=-Math.PI/2,i=0),s===void 0){const d=o*o,h=r*r,f=a*a;s=Math.atan2(2*r*c-2*o*a,1-2*h-2*f),n=Math.asin(2*u),i=Math.atan2(2*o*c-2*r*a,1-2*d-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),c=Math.sin(e/2),u=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*c*u,this.y=i*c*r-a*o*u,this.z=i*o*u+a*c*r,this.w=i*o*r-a*c*u):n==="YXZ"?(this.x=a*o*r+i*c*u,this.y=i*c*r-a*o*u,this.z=i*o*u-a*c*r,this.w=i*o*r+a*c*u):n==="ZXY"?(this.x=a*o*r-i*c*u,this.y=i*c*r+a*o*u,this.z=i*o*u+a*c*r,this.w=i*o*r-a*c*u):n==="ZYX"?(this.x=a*o*r-i*c*u,this.y=i*c*r+a*o*u,this.z=i*o*u-a*c*r,this.w=i*o*r+a*c*u):n==="YZX"?(this.x=a*o*r+i*c*u,this.y=i*c*r+a*o*u,this.z=i*o*u-a*c*r,this.w=i*o*r-a*c*u):n==="XZY"&&(this.x=a*o*r-i*c*u,this.y=i*c*r-a*o*u,this.z=i*o*u+a*c*r,this.w=i*o*r+a*c*u),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,c=t.y,u=t.z,d=t.w,h,f,p,m,y;return f=n*a+i*c+o*u+r*d,f<0&&(f=-f,a=-a,c=-c,u=-u,d=-d),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),m=Math.sin((1-e)*h)/p,y=Math.sin(e*h)/p):(m=1-e,y=e),s.x=m*n+y*a,s.y=m*i+y*c,s.z=m*o+y*u,s.w=m*r+y*d,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,c=this.y,u=this.z,d=this.w,h=e*.5;return n.x+=h*(i*d+o*u-r*c),n.y+=h*(o*d+r*a-i*u),n.z+=h*(r*d+i*c-o*a),n.w+=h*(-i*a-o*c-r*u),n}}const hs=new l,us=new l,ds={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class I{constructor(t){t===void 0&&(t={}),this.id=I.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}I.idCounter=0;I.types=ds;class W{constructor(t){t===void 0&&(t={}),this.position=new l,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),s.vsub(t,n),e.conjugate(oe),oe.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const oe=new H;class wt extends I{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:I.types.CONVEXPOLYHEDRON});this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const c=(a+1)%r;e[o[a]].vsub(e[o[c]],n),n.normalize();let u=!1;for(let d=0;d!==s.length;d++)if(s[d].almostEquals(n)||s[d].almostEquals(n)){u=!0;break}u||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];wt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,c){const u=new l;let d=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){u.copy(s.faceNormals[p]),i.vmult(u,u);const m=u.dot(o);m>h&&(h=m,d=p)}const f=[];for(let p=0;p<s.faces[d].length;p++){const m=s.vertices[s.faces[d][p]],y=new l;y.copy(m),i.vmult(y,y),n.vadd(y,y),f.push(y)}d>=0&&this.clipFaceAgainstHull(o,t,e,f,r,a,c)}findSeparatingAxis(t,e,s,n,i,o,r,a){const c=new l,u=new l,d=new l,h=new l,f=new l,p=new l;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],c);const v=y.testSepAxis(c,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(c))}else{const w=r?r.length:y.faces.length;for(let v=0;v<w;v++){const x=r?r[v]:v;c.copy(y.faceNormals[x]),s.vmult(c,c);const g=y.testSepAxis(c,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(c))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],u);const v=y.testSepAxis(u,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(u))}else{const w=a?a.length:t.faces.length;for(let v=0;v<w;v++){const x=a?a[v]:v;u.copy(t.faceNormals[x]),i.vmult(u,u);const g=y.testSepAxis(u,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(u))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=y.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(p))}}return n.vsub(e,d),d.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;wt.project(r,t,s,n,Vt),wt.project(e,t,i,o,Dt);const a=Vt[0],c=Vt[1],u=Dt[0],d=Dt[1];if(a<d||u<c)return!1;const h=a-d,f=u-c;return h<f?h:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new l,c=new l,u=new l,d=new l,h=new l,f=new l,p=new l,m=new l,y=this,w=[],v=n,x=w;let g=-1,b=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){a.copy(y.faceNormals[B]),s.vmult(a,a);const z=a.dot(t);z<b&&(b=z,g=B)}if(g<0)return;const C=y.faces[g];C.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let z=0;z<y.faces[B].length;z++)C.indexOf(y.faces[B][z])!==-1&&B!==g&&C.connectedFaces.indexOf(B)===-1&&C.connectedFaces.push(B);const M=C.length;for(let B=0;B<M;B++){const z=y.vertices[C[B]],_=y.vertices[C[(B+1)%M]];z.vsub(_,c),u.copy(c),s.vmult(u,u),e.vadd(u,u),d.copy(this.faceNormals[g]),s.vmult(d,d),e.vadd(d,d),u.cross(d,h),h.negate(h),f.copy(z),s.vmult(f,f),e.vadd(f,f);const E=C.connectedFaces[B];p.copy(this.faceNormals[E]);const T=this.getPlaneConstantOfFace(E);m.copy(p),s.vmult(m,m);const N=T-m.dot(e);for(this.clipFaceAgainstPlane(v,x,m,N);v.length;)v.shift();for(;x.length;)v.push(x.shift())}p.copy(this.faceNormals[g]);const P=this.getPlaneConstantOfFace(g);m.copy(p),s.vmult(m,m);const R=P-m.dot(e);for(let B=0;B<v.length;B++){let z=m.dot(v[B])+R;if(z<=i&&(console.log(`clamped: depth=${z} to minDist=${i}`),z=i),z<=o){const _=v[B];if(z<=1e-6){const E={point:_,normal:m,depth:z};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],c=t[0];i=s.dot(a)+n;for(let u=0;u<r;u++){if(c=t[u],o=s.dot(c)+n,i<0)if(o<0){const d=new l;d.copy(c),e.push(d)}else{const d=new l;a.lerp(c,i/(i-o),d),e.push(d)}else if(o<0){const d=new l;a.lerp(c,i/(i-o),d),e.push(d),e.push(c)}a=c,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,c,u,d,h=new l;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(c===void 0||p.x>c)&&(c=p.x),(r===void 0||p.y<r)&&(r=p.y),(u===void 0||p.y>u)&&(u=p.y),(a===void 0||p.z<a)&&(a=p.z),(d===void 0||p.z>d)&&(d=p.z)}s.set(o,r,a),n.set(c,u,d)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new l;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const a=e[s[o][0]],c=new l;t.vsub(a,c);const u=r.dot(c),d=new l;i.vsub(a,d);const h=r.dot(d);if(u<0&&h>0||u>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ps;let a=0,c=0;const u=fs,d=t.vertices;u.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,u,u);const h=u.dot(r);c=a=d[0].dot(r);for(let f=1;f<o;f++){const p=d[f].dot(r);p>a&&(a=p),p<c&&(c=p)}if(c-=h,a-=h,c>a){const f=c;c=a,a=f}i[0]=a,i[1]=c}}const Vt=[],Dt=[];new l;const ps=new l,fs=new l;class At extends I{constructor(t){super({type:I.types.BOX});this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new wt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new l),At.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ut.set(i[o][0],i[o][1],i[o][2]),e.vmult(ut,ut),t.vadd(ut,ut),s(ut.x,ut.y,ut.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;et[0].set(i.x,i.y,i.z),et[1].set(-i.x,i.y,i.z),et[2].set(-i.x,-i.y,i.z),et[3].set(-i.x,-i.y,-i.z),et[4].set(i.x,-i.y,-i.z),et[5].set(i.x,i.y,-i.z),et[6].set(-i.x,i.y,-i.z),et[7].set(i.x,-i.y,i.z);const o=et[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=et[r];e.vmult(a,a),t.vadd(a,a);const c=a.x,u=a.y,d=a.z;c>n.x&&(n.x=c),u>n.y&&(n.y=u),d>n.z&&(n.z=d),c<s.x&&(s.x=c),u<s.y&&(s.y=u),d<s.z&&(s.z=d)}}}const ut=new l,et=[new l,new l,new l,new l,new l,new l,new l,new l],Xt={DYNAMIC:1,STATIC:2,KINEMATIC:4},$t={AWAKE:0,SLEEPY:1,SLEEPING:2};class F extends Ee{constructor(t){t===void 0&&(t={});super();this.id=F.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?F.STATIC:F.DYNAMIC,typeof t.type==typeof F.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep!="undefined"?t.allowSleep:!0,this.sleepState=F.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit!="undefined"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit!="undefined"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new Q,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new Q,this.fixedRotation=typeof t.fixedRotation!="undefined"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping!="undefined"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new K,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=F.AWAKE,this.wakeUpAfterNarrowphase=!1,t===F.SLEEPING&&this.dispatchEvent(F.wakeupEvent)}sleep(){this.sleepState=F.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===F.AWAKE&&s<n?(this.sleepState=F.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(F.sleepyEvent)):e===F.SLEEPY&&s>n?this.wakeUp():e===F.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(F.sleepEvent))}}updateSolveMassProperties(){this.sleepState===F.SLEEPING||this.type===F.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=vs,o=ms,r=this.quaternion,a=this.aabb,c=ys;for(let u=0;u!==n;u++){const d=t[u];r.vmult(e[u],i),i.vadd(this.position,i),r.mult(s[u],o),d.calculateWorldAABB(i,o,c.lowerBound,c.upperBound),u===0?a.copy(c):a.extend(c)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=ws,n=gs;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new l),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=bs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new l),this.type!==F.DYNAMIC)return;const s=Es,n=zs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===F.DYNAMIC&&(this.sleepState===F.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new l),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=e,n=Cs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=As;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new l),this.type!==F.DYNAMIC)return;const s=Ms,n=Ss;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Bs;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),At.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===F.DYNAMIC||this.type===F.KINEMATIC)||this.sleepState===F.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,c=this.quaternion,u=this.invMass,d=this.invInertiaWorld,h=this.linearFactor,f=u*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=d.elements,m=this.angularFactor,y=a.x*m.x,w=a.y*m.y,v=a.z*m.z;i.x+=t*(p[0]*y+p[1]*w+p[2]*v),i.y+=t*(p[3]*y+p[4]*w+p[5]*v),i.z+=t*(p[6]*y+p[7]*w+p[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,c.integrate(this.angularVelocity,t,this.angularFactor,c),e&&(s?c.normalizeFast():c.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}F.idCounter=0;F.COLLIDE_EVENT_NAME="collide";F.DYNAMIC=Xt.DYNAMIC;F.STATIC=Xt.STATIC;F.KINEMATIC=Xt.KINEMATIC;F.AWAKE=$t.AWAKE;F.SLEEPY=$t.SLEEPY;F.SLEEPING=$t.SLEEPING;F.wakeupEvent={type:"wakeup"};F.sleepyEvent={type:"sleepy"};F.sleepEvent={type:"sleep"};const vs=new l,ms=new H,ys=new K,ws=new Q,gs=new Q,xs=new Q,bs=new l,Es=new l,zs=new l,Cs=new l,As=new l,Ms=new l,Ss=new l,Bs=new l;class Ts{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&F.STATIC)!==0||t.sleepState===F.SLEEPING)&&((e.type&F.STATIC)!==0||e.sleepState===F.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Ns;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ps,n=Fs,i=Is,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,c=i[r].id,u=a<c?`${a},${c}`:`${c},${a}`;s[u]=r,s.keys.push(u)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),c=s[a];t.push(n[c]),e.push(i[c]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Ns=new l;new l;new H;new l;const Ps={keys:[]},Fs=[],Is=[];new l;new l;new l;class Rs extends Ts{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let c=0;c!==a;c++)o=n[a],r=n[c],!!this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class jt{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ze,Ce,Ae,Me,Se,Be,Te;const Zt={CLOSEST:1,ANY:2,ALL:4};ze=I.types.SPHERE;Ce=I.types.PLANE;Ae=I.types.BOX;Me=I.types.CYLINDER;Se=I.types.CONVEXPOLYHEDRON;Be=I.types.HEIGHTFIELD;Te=I.types.TRIMESH;class G{get[ze](){return this._intersectSphere}get[Ce](){return this._intersectPlane}get[Ae](){return this._intersectBox}get[Me](){return this._intersectConvex}get[Se](){return this._intersectConvex}get[Be](){return this._intersectHeightfield}get[Te](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new l),e===void 0&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=G.ANY,this.result=new jt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||G.ANY,this.result=e.result||new jt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask!="undefined"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup!="undefined"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse!="undefined"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(re),Gt.length=0,t.broadphase.aabbQuery(t,re,Gt),this.intersectBodies(Gt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=_s,i=qs;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Zs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,c=new l(0,0,1);e.vmult(c,c);const u=new l;o.vsub(s,u);const d=u.dot(c);r.vsub(s,u);const h=u.dot(c);if(d*h>0||o.distanceTo(r)<d)return;const f=c.dot(a);if(Math.abs(f)<this.precision)return;const p=new l,m=new l,y=new l;o.vsub(s,p);const w=-c.dot(p)/f;a.scale(w,m),o.vadd(m,y),this.reportIntersection(c,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ls;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Os;let a,c,u,d;a=c=0,u=d=t.data.length-1;const h=new K;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),c=Math.max(c,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),u=Math.min(u,r[0]+1),d=Math.min(d,r[1]+1);for(let f=a;f<u;f++)for(let p=c;p<d;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),W.pointToWorldFrame(s,e,t.pillarOffset,Rt),this._intersectConvex(t.pillarConvex,e,Rt,n,i,ae),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),W.pointToWorldFrame(s,e,t.pillarOffset,Rt),this._intersectConvex(t.pillarConvex,e,Rt,n,i,ae)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,c=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,u=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),d=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=u**2-4*c*d,f=js,p=Ws;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-u-Math.sqrt(h))/(2*c),y=(-u+Math.sqrt(h))/(2*c);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=ks,a=le,c=o&&o.faceList||null,u=t.faces,d=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,m=this.to,y=p.distanceTo(m),w=c?c.length:u.length,v=this.result;for(let x=0;!v.shouldStop&&x<w;x++){const g=c?c[x]:x,b=u[g],C=h[g],M=e,P=s;a.copy(d[b[0]]),M.vmult(a,a),a.vadd(P,a),a.vsub(p,a),M.vmult(C,r);const R=f.dot(r);if(Math.abs(R)<this.precision)continue;const B=r.dot(a)/R;if(!(B<0)){f.scale(B,$),$.vadd(p,$),J.copy(d[b[0]]),M.vmult(J,J),P.vadd(J,J);for(let z=1;!v.shouldStop&&z<b.length-1;z++){st.copy(d[b[z]]),nt.copy(d[b[z+1]]),M.vmult(st,st),M.vmult(nt,nt),P.vadd(st,st),P.vadd(nt,nt);const _=$.distanceTo(p);!(G.pointInTriangle($,J,st,nt)||G.pointInTriangle($,st,J,nt))||_>y||this.reportIntersection(r,$,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Vs,a=Xs,c=$s,u=le,d=Ds,h=Gs,f=Hs,p=Ys,m=Us,y=t.indices;t.vertices;const w=this.from,v=this.to,x=this.direction;c.position.copy(s),c.quaternion.copy(e),W.vectorToLocalFrame(s,e,x,d),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,d),d.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,c,a);for(let b=0,C=a.length;!this.result.shouldStop&&b!==C;b++){const M=a[b];t.getNormal(M,r),t.getVertex(y[M*3],J),J.vsub(h,u);const P=d.dot(r),R=r.dot(u)/P;if(R<0)continue;d.scale(R,$),$.vadd(h,$),t.getVertex(y[M*3+1],st),t.getVertex(y[M*3+2],nt);const B=$.distanceSquared(h);!(G.pointInTriangle($,st,J,nt)||G.pointInTriangle($,J,st,nt))||B>g||(W.vectorToWorldFrame(e,r,m),W.pointToWorldFrame(s,e,$,p),this.reportIntersection(m,p,i,n,M))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),c=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(c.hitFaceIndex=typeof i!="undefined"?i:-1,this.mode){case G.ALL:this.hasHit=!0,c.set(o,r,t,e,s,n,a),c.hasHit=!0,this.callback(c);break;case G.CLOSEST:(a<c.distance||!c.hasHit)&&(this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,a));break;case G.ANY:this.hasHit=!0,c.hasHit=!0,c.set(o,r,t,e,s,n,a),c.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,pt),s.vsub(e,bt),t.vsub(e,Ht);const i=pt.dot(pt),o=pt.dot(bt),r=pt.dot(Ht),a=bt.dot(bt),c=bt.dot(Ht);let u,d;return(u=a*r-o*c)>=0&&(d=i*c-o*r)>=0&&u+d<i*a-o*o}}G.CLOSEST=Zt.CLOSEST;G.ANY=Zt.ANY;G.ALL=Zt.ALL;const re=new K,Gt=[],bt=new l,Ht=new l,_s=new l,qs=new H,$=new l,J=new l,st=new l,nt=new l;new l;new jt;const ae={faceList:[0]},Rt=new l,Ls=new G,Os=[],js=new l,Ws=new l,ks=new l;new l;new l;const le=new l,Vs=new l,Ds=new l,Gs=new l,Hs=new l,Us=new l,Ys=new l;new K;const Xs=[],$s=new W,pt=new l,_t=new l;function Zs(S,t,e){e.vsub(S,pt);const s=pt.dot(t);return t.scale(s,_t),_t.vadd(S,_t),e.distanceTo(_t)}class Ks{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ce{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Mt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Mt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ce,this.jacobianElementB=new ce,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,c=s.invMassSolve,u=n.invMassSolve;return i.scale(c,he),r.scale(u,ue),s.invInertiaWorldSolve.vmult(o,de),n.invInertiaWorldSolve.vmult(a,pe),t.multiplyVectors(he,de)+e.multiplyVectors(ue,pe)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let c=i+o;return r.vmult(t.rotational,qt),c+=qt.dot(t.rotational),a.vmult(e.rotational,qt),c+=qt.dot(e.rotational),c}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Js;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Mt.idCounter=0;const he=new l,ue=new l,de=new l,pe=new l,qt=new l,Js=new l;class Qs extends Mt{constructor(t,e,s){s===void 0&&(s=1e6);super(t,e,0,s);this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=tn,c=en,u=n.velocity,d=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=sn,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,c),w.negate(m.spatial),a.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(c),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const v=w.dot(p),x=this.restitution+1,g=x*h.dot(w)-x*u.dot(w)+f.dot(c)-d.dot(a),b=this.computeGiMf();return-v*e-g*s-t*b}getImpactVelocityAlongNormal(){const t=nn,e=on,s=rn,n=an,i=ln;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const tn=new l,en=new l,sn=new l,nn=new l,on=new l,rn=new l,an=new l,ln=new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class fe extends Mt{constructor(t,e,s){super(t,e,-s,s);this.ri=new l,this.rj=new l,this.t=new l}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=cn,o=hn,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,c=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),c.spatial.copy(r),c.rotational.copy(o);const u=this.computeGW(),d=this.computeGiMf();return-u*e-t*d}}const cn=new l,hn=new l;class St{constructor(t,e,s){s=Ks.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=St.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}St.idCounter=0;class Bt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Bt.idCounter++,this.friction=typeof t.friction!="undefined"?t.friction:-1,this.restitution=typeof t.restitution!="undefined"?t.restitution:-1}}Bt.idCounter=0;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new G;new l;new l;new l;new l(1,0,0),new l(0,1,0),new l(0,0,1);new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class un extends wt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],a=[],c=[],u=[],d=Math.cos,h=Math.sin;o.push(new l(-e*h(0),-s*.5,e*d(0))),c.push(0),o.push(new l(-t*h(0),s*.5,t*d(0))),u.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),y=2*Math.PI/i*(p+.5);p<i-1?(o.push(new l(-e*h(m),-s*.5,e*d(m))),c.push(2*p+2),o.push(new l(-t*h(m),s*.5,t*d(m))),u.push(2*p+3),a.push([2*p,2*p+1,2*p+3,2*p+2])):a.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new l(-h(y),0,d(y)))}a.push(c),r.push(new l(0,1,0));const f=[];for(let p=0;p<u.length;p++)f.push(u[u.length-p-1]);a.push(f);super({vertices:o,faces:a,axes:r});this.type=I.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}class dn extends I{constructor(){super({type:I.types.PLANE});this.worldNormal=new l,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){ot.set(0,0,1),e.vmult(ot,ot);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),ot.x===1?n.x=t.x:ot.x===-1&&(s.x=t.x),ot.y===1?n.y=t.y:ot.y===-1&&(s.y=t.y),ot.z===1?n.z=t.z:ot.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ot=new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new K;new l;new K;new l;new l;new l;new l;new l;new l;new l;new K;new l;new W;new K;class pn{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class fn extends pn{constructor(){super();this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,c=a.length,u=t;let d,h,f,p,m,y;if(r!==0)for(let g=0;g!==c;g++)a[g].updateSolveMassProperties();const w=mn,v=yn,x=vn;w.length=r,v.length=r,x.length=r;for(let g=0;g!==r;g++){const b=o[g];x[g]=0,v[g]=b.computeB(u),w[g]=1/b.computeC()}if(r!==0){for(let C=0;C!==c;C++){const M=a[C],P=M.vlambda,R=M.wlambda;P.set(0,0,0),R.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const M=o[C];d=v[C],h=w[C],y=x[C],m=M.computeGWlambda(),f=h*(d-m-M.eps*y),y+f<M.minForce?f=M.minForce-y:y+f>M.maxForce&&(f=M.maxForce-y),x[C]+=f,p+=f>0?f:-f,M.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==c;C++){const M=a[C],P=M.velocity,R=M.angularVelocity;M.vlambda.vmul(M.linearFactor,M.vlambda),P.vadd(M.vlambda,P),M.wlambda.vmul(M.angularFactor,M.wlambda),R.vadd(M.wlambda,R)}let g=o.length;const b=1/u;for(;g--;)o[g].multiplier=x[g]*b}return s}}const vn=[],mn=[],yn=[];class wn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class gn extends wn{constructor(){super(...arguments);this.type=l}constructObject(){return new l}}const D={sphereSphere:I.types.SPHERE,spherePlane:I.types.SPHERE|I.types.PLANE,boxBox:I.types.BOX|I.types.BOX,sphereBox:I.types.SPHERE|I.types.BOX,planeBox:I.types.PLANE|I.types.BOX,convexConvex:I.types.CONVEXPOLYHEDRON,sphereConvex:I.types.SPHERE|I.types.CONVEXPOLYHEDRON,planeConvex:I.types.PLANE|I.types.CONVEXPOLYHEDRON,boxConvex:I.types.BOX|I.types.CONVEXPOLYHEDRON,sphereHeightfield:I.types.SPHERE|I.types.HEIGHTFIELD,boxHeightfield:I.types.BOX|I.types.HEIGHTFIELD,convexHeightfield:I.types.CONVEXPOLYHEDRON|I.types.HEIGHTFIELD,sphereParticle:I.types.PARTICLE|I.types.SPHERE,planeParticle:I.types.PLANE|I.types.PARTICLE,boxParticle:I.types.BOX|I.types.PARTICLE,convexParticle:I.types.PARTICLE|I.types.CONVEXPOLYHEDRON,cylinderCylinder:I.types.CYLINDER,sphereCylinder:I.types.SPHERE|I.types.CYLINDER,planeCylinder:I.types.PLANE|I.types.CYLINDER,boxCylinder:I.types.BOX|I.types.CYLINDER,convexCylinder:I.types.CONVEXPOLYHEDRON|I.types.CYLINDER,heightfieldCylinder:I.types.HEIGHTFIELD|I.types.CYLINDER,particleCylinder:I.types.PARTICLE|I.types.CYLINDER,sphereTrimesh:I.types.SPHERE|I.types.TRIMESH,planeTrimesh:I.types.PLANE|I.types.TRIMESH};class xn{get[D.sphereSphere](){return this.sphereSphere}get[D.spherePlane](){return this.spherePlane}get[D.boxBox](){return this.boxBox}get[D.sphereBox](){return this.sphereBox}get[D.planeBox](){return this.planeBox}get[D.convexConvex](){return this.convexConvex}get[D.sphereConvex](){return this.sphereConvex}get[D.planeConvex](){return this.planeConvex}get[D.boxConvex](){return this.boxConvex}get[D.sphereHeightfield](){return this.sphereHeightfield}get[D.boxHeightfield](){return this.boxHeightfield}get[D.convexHeightfield](){return this.convexHeightfield}get[D.sphereParticle](){return this.sphereParticle}get[D.planeParticle](){return this.planeParticle}get[D.boxParticle](){return this.boxParticle}get[D.convexParticle](){return this.convexParticle}get[D.cylinderCylinder](){return this.convexConvex}get[D.sphereCylinder](){return this.sphereConvex}get[D.planeCylinder](){return this.planeConvex}get[D.boxCylinder](){return this.boxConvex}get[D.convexCylinder](){return this.convexConvex}get[D.heightfieldCylinder](){return this.heightfieldCylinder}get[D.particleCylinder](){return this.particleCylinder}get[D.sphereTrimesh](){return this.sphereTrimesh}get[D.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new gn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Qs(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const c=s.material||t.material,u=n.material||e.material;return c&&u&&c.restitution>=0&&u.restitution>=0&&(r.restitution=c.restitution*u.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let c=a.friction;const u=i.material||s.material,d=o.material||n.material;if(u&&d&&u.friction>=0&&d.friction>=0&&(c=u.friction*d.friction),c>0){const h=c*r.gravity.length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new fe(s,n,h*f),y=p.length?p.pop():new fe(s,n,h*f);return m.bi=y.bi=s,m.bj=y.bj=n,m.minForce=y.minForce=-h*f,m.maxForce=y.maxForce=h*f,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),y.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];dt.setZero(),vt.setZero(),mt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(dt.vadd(e.ni,dt),vt.vadd(e.ri,vt),mt.vadd(e.rj,mt)):(dt.vsub(e.ni,dt),vt.vadd(e.rj,vt),mt.vadd(e.ri,mt));const o=1/t;vt.scale(o,s.ri),mt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),dt.normalize(),dt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=zn,c=Cn,u=bn,d=En;for(let h=0,f=t.length;h!==f;h++){const p=t[h],m=e[h];let y=null;p.material&&m.material&&(y=s.getContactMaterial(p.material,m.material)||null);const w=p.type&F.KINEMATIC&&m.type&F.STATIC||p.type&F.STATIC&&m.type&F.KINEMATIC||p.type&F.KINEMATIC&&m.type&F.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],a),p.quaternion.vmult(p.shapeOffsets[v],u),u.vadd(p.position,u);const x=p.shapes[v];for(let g=0;g<m.shapes.length;g++){m.quaternion.mult(m.shapeOrientations[g],c),m.quaternion.vmult(m.shapeOffsets[g],d),d.vadd(m.position,d);const b=m.shapes[g];if(!(x.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&x.collisionFilterGroup)||u.distanceTo(d)>x.boundingSphereRadius+b.boundingSphereRadius)continue;let C=null;x.material&&b.material&&(C=s.getContactMaterial(x.material,b.material)||null),this.currentContactMaterial=C||y||s.defaultContactMaterial;const M=x.type|b.type,P=this[M];if(P){let R=!1;x.type<b.type?R=P.call(this,x,b,u,d,a,c,p,m,x,b,w):R=P.call(this,b,x,d,u,c,a,m,p,x,b,w),R&&w&&(s.shapeOverlapKeeper.set(x.id,b.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,c,u,d){if(d)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,c,u);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,c,u,d){const h=this.createContactEquation(r,a,t,e,c,u);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Lt),h.ni.scale(h.ni.dot(Lt),ve),Lt.vsub(ve,h.rj),-Lt.dot(h.ni)<=t.radius){if(d)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(a.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,d)}sphereBox(t,e,s,n,i,o,r,a,c,u,d){const h=this.v3pool,f=Zn;s.vsub(n,Ot),e.getSideNormals(f,o);const p=t.radius;let m=!1;const y=Jn,w=Qn,v=ti;let x=null,g=0,b=0,C=0,M=null;for(let A=0,j=f.length;A!==j&&m===!1;A++){const L=Yn;L.copy(f[A]);const O=L.length();L.normalize();const k=Ot.dot(L);if(k<O+p&&k>0){const V=Xn,q=$n;V.copy(f[(A+1)%3]),q.copy(f[(A+2)%3]);const X=V.length(),ft=q.length();V.normalize(),q.normalize();const Z=Ot.dot(V),gt=Ot.dot(q);if(Z<X&&Z>-X&&gt<ft&&gt>-ft){const Tt=Math.abs(k-O-p);if((M===null||Tt<M)&&(M=Tt,b=Z,C=gt,x=O,y.copy(L),w.copy(V),v.copy(q),g++,d))return!0}}}if(g){m=!0;const A=this.createContactEquation(r,a,t,e,c,u);y.scale(-p,A.ri),A.ni.copy(y),A.ni.negate(A.ni),y.scale(x,y),w.scale(b,w),y.vadd(w,y),v.scale(C,v),y.vadd(v,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.vadd(n,A.rj),A.rj.vsub(a.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}let P=h.get();const R=Kn;for(let A=0;A!==2&&!m;A++)for(let j=0;j!==2&&!m;j++)for(let L=0;L!==2&&!m;L++)if(P.set(0,0,0),A?P.vadd(f[0],P):P.vsub(f[0],P),j?P.vadd(f[1],P):P.vsub(f[1],P),L?P.vadd(f[2],P):P.vsub(f[2],P),n.vadd(P,R),R.vsub(s,R),R.lengthSquared()<p*p){if(d)return!0;m=!0;const O=this.createContactEquation(r,a,t,e,c,u);O.ri.copy(R),O.ri.normalize(),O.ni.copy(O.ri),O.ri.scale(p,O.ri),O.rj.copy(P),O.ri.vadd(s,O.ri),O.ri.vsub(r.position,O.ri),O.rj.vadd(n,O.rj),O.rj.vsub(a.position,O.rj),this.result.push(O),this.createFrictionEquationsFromContact(O,this.frictionResult)}h.release(P),P=null;const B=h.get(),z=h.get(),_=h.get(),E=h.get(),T=h.get(),N=f.length;for(let A=0;A!==N&&!m;A++)for(let j=0;j!==N&&!m;j++)if(A%3!==j%3){f[j].cross(f[A],B),B.normalize(),f[A].vadd(f[j],z),_.copy(s),_.vsub(z,_),_.vsub(n,_);const L=_.dot(B);B.scale(L,E);let O=0;for(;O===A%3||O===j%3;)O++;T.copy(s),T.vsub(E,T),T.vsub(z,T),T.vsub(n,T);const k=Math.abs(L),V=T.length();if(k<f[O].length()&&V<p){if(d)return!0;m=!0;const q=this.createContactEquation(r,a,t,e,c,u);z.vadd(E,q.rj),q.rj.copy(q.rj),T.negate(q.ni),q.ni.normalize(),q.ri.copy(q.rj),q.ri.vadd(n,q.ri),q.ri.vsub(s,q.ri),q.ri.normalize(),q.ri.scale(p,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(a.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}h.release(B,z,_,E,T)}planeBox(t,e,s,n,i,o,r,a,c,u,d){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,d)}convexConvex(t,e,s,n,i,o,r,a,c,u,d,h,f){const p=vi;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const m=[],y=mi;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(d)return!0;const x=this.createContactEquation(r,a,t,e,c,u),g=x.ri,b=x.rj;p.negate(x.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,g),b.copy(m[v].point),g.vsub(s,g),b.vsub(n,b),g.vadd(s,g),g.vsub(r.position,g),b.vadd(n,b),b.vsub(a.position,b),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,c,u,d){const h=this.v3pool;s.vsub(n,ei);const f=e.faceNormals,p=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const x=m[v],g=oi;o.vmult(x,g),n.vadd(g,g);const b=ii;if(g.vsub(s,b),b.lengthSquared()<y*y){if(d)return!0;w=!0;const C=this.createContactEquation(r,a,t,e,c,u);C.ri.copy(b),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(y,C.ri),g.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let v=0,x=p.length;v!==x&&w===!1;v++){const g=f[v],b=p[v],C=ri;o.vmult(g,C);const M=ai;o.vmult(m[b[0]],M),M.vadd(n,M);const P=li;C.scale(-y,P),s.vadd(P,P);const R=ci;P.vsub(M,R);const B=R.dot(C),z=hi;if(s.vsub(M,z),B<0&&z.dot(C)>0){const _=[];for(let E=0,T=b.length;E!==T;E++){const N=h.get();o.vmult(m[b[E]],N),n.vadd(N,N),_.push(N)}if(Un(_,C,s)){if(d)return!0;w=!0;const E=this.createContactEquation(r,a,t,e,c,u);C.scale(-y,E.ri),C.negate(E.ni);const T=h.get();C.scale(-B,T);const N=h.get();C.scale(-y,N),s.vsub(n,E.rj),E.rj.vadd(N,E.rj),E.rj.vadd(T,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(a.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(T),h.release(N),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let A=0,j=_.length;A!==j;A++)h.release(_[A]);return}else for(let E=0;E!==b.length;E++){const T=h.get(),N=h.get();o.vmult(m[b[(E+1)%b.length]],T),o.vmult(m[b[(E+2)%b.length]],N),n.vadd(T,T),n.vadd(N,N);const A=si;N.vsub(T,A);const j=ni;A.unit(j);const L=h.get(),O=h.get();s.vsub(T,O);const k=O.dot(j);j.scale(k,L),L.vadd(T,L);const V=h.get();if(L.vsub(s,V),k>0&&k*k<A.lengthSquared()&&V.lengthSquared()<y*y){if(d)return!0;const q=this.createContactEquation(r,a,t,e,c,u);L.vsub(n,q.rj),L.vsub(s,q.ni),q.ni.normalize(),q.ni.scale(y,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(a.position,q.rj),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult);for(let X=0,ft=_.length;X!==ft;X++)h.release(_[X]);h.release(T),h.release(N),h.release(L),h.release(V),h.release(O);return}h.release(T),h.release(N),h.release(L),h.release(V),h.release(O)}for(let E=0,T=_.length;E!==T;E++)h.release(_[E])}}}planeConvex(t,e,s,n,i,o,r,a,c,u,d){const h=ui,f=di;f.set(0,0,1),i.vmult(f,f);let p=0;const m=pi;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,m),f.dot(m)<=0){if(d)return!0;const v=this.createContactEquation(r,a,t,e,c,u),x=fi;f.scale(f.dot(m),x),h.vsub(x,x),x.vsub(s,v.ri),v.ni.copy(f),h.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(a.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,a,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,d)}sphereHeightfield(t,e,s,n,i,o,r,a,c,u,d){const h=e.data,f=t.radius,p=e.elementSize,m=Bi,y=Si;W.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/p)-1,v=Math.ceil((y.x+f)/p)+1,x=Math.floor((y.y-f)/p)-1,g=Math.ceil((y.y+f)/p)+1;if(v<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const b=[];e.getRectMinMax(w,x,v,g,b);const C=b[0],M=b[1];if(y.z-f>M||y.z+f<C)return;const P=this.result;for(let R=w;R<v;R++)for(let B=x;B<g;B++){const z=P.length;let _=!1;if(e.getConvexTrianglePillar(R,B,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,a,t,e,d)),d&&_||(e.getConvexTrianglePillar(R,B,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,a,t,e,d)),d&&_))return!0;if(P.length-z>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,d)}convexHeightfield(t,e,s,n,i,o,r,a,c,u,d){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=Ai,y=Mi,w=Ci;W.pointToLocalFrame(n,o,s,w);let v=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,b=Math.ceil((w.y+p)/f)+1;if(x<0||b<0||v>h.length||g>h[0].length)return;v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),b<0&&(b=0),v>=h.length&&(v=h.length-1),x>=h.length&&(x=h.length-1),b>=h[0].length&&(b=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const C=[];e.getRectMinMax(v,g,x,b,C);const M=C[0],P=C[1];if(!(w.z-p>P||w.z+p<M))for(let R=v;R<x;R++)for(let B=g;B<b;B++){let z=!1;if(e.getConvexTrianglePillar(R,B,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(z=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,a,null,null,d,y,null)),d&&z||(e.getConvexTrianglePillar(R,B,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(z=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,a,null,null,d,y,null)),d&&z))return!0}}sphereParticle(t,e,s,n,i,o,r,a,c,u,d){const h=xi;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(d)return!0;const p=this.createContactEquation(a,r,e,t,c,u);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,c,u,d){const h=yi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=wi;if(n.vsub(r.position,f),h.dot(f)<=0){if(d)return!0;const m=this.createContactEquation(a,r,e,t,c,u);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=gi;h.scale(h.dot(n),y),n.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,d)}convexParticle(t,e,s,n,i,o,r,a,c,u,d){let h=-1;const f=Ei,p=zi;let m=null;const y=bi;if(y.copy(n),y.vsub(s,y),i.conjugate(me),me.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],ye);const b=-g.dot(ye);if(m===null||Math.abs(b)<Math.abs(m)){if(d)return!0;m=b,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,c,u);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,x=w.rj;v.vadd(n,v),v.vsub(a.position,v),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,c,u,d){return this.convexHeightfield(e,t,n,s,o,i,a,r,c,u,d)}particleCylinder(t,e,s,n,i,o,r,a,c,u,d){return this.convexParticle(e,t,n,s,o,i,a,r,c,u,d)}sphereTrimesh(t,e,s,n,i,o,r,a,c,u,d){const h=Fn,f=In,p=Rn,m=_n,y=qn,w=Ln,v=kn,x=Pn,g=Tn,b=Vn;W.pointToLocalFrame(n,o,s,y);const C=t.radius;v.lowerBound.set(y.x-C,y.y-C,y.z-C),v.upperBound.set(y.x+C,y.y+C,y.z+C),e.getTrianglesInAABB(v,b);const M=Nn,P=t.radius*t.radius;for(let E=0;E<b.length;E++)for(let T=0;T<3;T++)if(e.getVertex(e.indices[b[E]*3+T],M),M.vsub(y,g),g.lengthSquared()<=P){if(x.copy(M),W.pointToWorldFrame(n,o,x,M),M.vsub(s,g),d)return!0;let N=this.createContactEquation(r,a,t,e,c,u);N.ni.copy(g),N.ni.normalize(),N.ri.copy(N.ni),N.ri.scale(t.radius,N.ri),N.ri.vadd(s,N.ri),N.ri.vsub(r.position,N.ri),N.rj.copy(M),N.rj.vsub(a.position,N.rj),this.result.push(N),this.createFrictionEquationsFromContact(N,this.frictionResult)}for(let E=0;E<b.length;E++)for(let T=0;T<3;T++){e.getVertex(e.indices[b[E]*3+T],h),e.getVertex(e.indices[b[E]*3+(T+1)%3],f),f.vsub(h,p),y.vsub(f,w);const N=w.dot(p);y.vsub(h,w);let A=w.dot(p);if(A>0&&N<0&&(y.vsub(h,w),m.copy(p),m.normalize(),A=w.dot(m),m.scale(A,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(d)return!0;const L=this.createContactEquation(r,a,t,e,c,u);w.vsub(y,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,L.rj),W.vectorToWorldFrame(o,L.ni,L.ni),W.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const R=On,B=jn,z=Wn,_=Bn;for(let E=0,T=b.length;E!==T;E++){e.getTriangleVertices(b[E],R,B,z),e.getNormal(b[E],_),y.vsub(R,w);let N=w.dot(_);if(_.scale(N,w),y.vsub(w,w),N=w.distanceTo(y),G.pointInTriangle(w,R,B,z)&&N<t.radius){if(d)return!0;let A=this.createContactEquation(r,a,t,e,c,u);w.vsub(y,A.ni),A.ni.normalize(),A.ni.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,A.rj),W.vectorToWorldFrame(o,A.ni,A.ni),W.vectorToWorldFrame(o,A.ri,A.ri),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,i,o,r,a,c,u,d){const h=new l,f=An;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const m=new l;m.copy(h),W.pointToWorldFrame(n,o,m,h);const y=Mn;if(h.vsub(s,y),f.dot(y)<=0){if(d)return!0;const v=this.createContactEquation(r,a,t,e,c,u);v.ni.copy(f);const x=Sn;f.scale(y.dot(f),x),h.vsub(x,x),v.ri.copy(x),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(a.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const dt=new l,vt=new l,mt=new l,bn=new l,En=new l,zn=new H,Cn=new H,An=new l,Mn=new l,Sn=new l,Bn=new l,Tn=new l;new l;const Nn=new l,Pn=new l,Fn=new l,In=new l,Rn=new l,_n=new l,qn=new l,Ln=new l,On=new l,jn=new l,Wn=new l,kn=new K,Vn=[],Lt=new l,ve=new l,Dn=new l,Gn=new l,Hn=new l;function Un(S,t,e){let s=null;const n=S.length;for(let i=0;i!==n;i++){const o=S[i],r=Dn;S[(i+1)%n].vsub(o,r);const a=Gn;r.cross(t,a);const c=Hn;e.vsub(o,c);const u=a.dot(c);if(s===null||u>0&&s===!0||u<=0&&s===!1){s===null&&(s=u>0);continue}else return!1}return!0}const Ot=new l,Yn=new l,Xn=new l,$n=new l,Zn=[new l,new l,new l,new l,new l,new l],Kn=new l,Jn=new l,Qn=new l,ti=new l,ei=new l,si=new l,ni=new l,ii=new l,oi=new l,ri=new l,ai=new l,li=new l,ci=new l,hi=new l;new l;new l;const ui=new l,di=new l,pi=new l,fi=new l,vi=new l,mi=new l,yi=new l,wi=new l,gi=new l,xi=new l,me=new H,bi=new l;new l;const Ei=new l,ye=new l,zi=new l,Ci=new l,Ai=new l,Mi=[0],Si=new l,Bi=new l;class we{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let c=!1;const u=s[a];for(;u>n[r];)r++;c=u===n[r],c||ge(t,u)}r=0;for(let a=0;a<o;a++){let c=!1;const u=n[a];for(;u>s[r];)r++;c=s[r]===u,c||ge(e,u)}}}function ge(S,t){S.push((t&4294901760)>>16,t&65535)}const Ut=(S,t)=>S<t?`${S}-${t}`:`${t}-${S}`;class Ti{constructor(){this.data={keys:[]}}get(t,e){const s=Ut(t,e);return this.data[s]}set(t,e,s){const n=Ut(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Ut(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Ni extends Ee{constructor(t){t===void 0&&(t={});super();this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=t.broadphase!==void 0?t.broadphase:new Rs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new fn,this.constraints=[],this.narrowphase=new xn(this),this.collisionMatrix=new ie,this.collisionMatrixPrevious=new ie,this.bodyOverlapKeeper=new we,this.shapeOverlapKeeper=new we,this.contactmaterials=[],this.contactMaterialTable=new Ti,this.defaultMaterial=new Bt("default"),this.defaultContactMaterial=new St(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof jt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ALL,s.from=t,s.to=e,s.callback=n,Yt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ANY,s.from=t,s.to=e,s.result=n,Yt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=G.CLOSEST,s.from=t,s.to=e,s.result=n,Yt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof F&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=U.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=U.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(U.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=_i,n=qi,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,c=this.doProfiling,u=this.profile,d=F.DYNAMIC;let h=-1/0;const f=this.constraints,p=Ri;a.length();const m=a.x,y=a.y,w=a.z;let v=0;for(c&&(h=U.now()),v=0;v!==i;v++){const E=o[v];if(E.type===d){const T=E.force,N=E.mass;T.x+=N*m,T.y+=N*y,T.z+=N*w}}for(let E=0,T=this.subsystems.length;E!==T;E++)this.subsystems[E].update();c&&(h=U.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),c&&(u.broadphase=U.now()-h);let x=f.length;for(v=0;v!==x;v++){const E=f[v];if(!E.collideConnected)for(let T=s.length-1;T>=0;T-=1)(E.bodyA===s[T]&&E.bodyB===n[T]||E.bodyB===s[T]&&E.bodyA===n[T])&&(s.splice(T,1),n.splice(T,1))}this.collisionMatrixTick(),c&&(h=U.now());const g=Ii,b=e.length;for(v=0;v!==b;v++)g.push(e[v]);e.length=0;const C=this.frictionEquations.length;for(v=0;v!==C;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),c&&(u.narrowphase=U.now()-h),c&&(h=U.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const M=e.length;for(let E=0;E!==M;E++){const T=e[E],N=T.bi,A=T.bj,j=T.si,L=T.sj;let O;if(N.material&&A.material?O=this.getContactMaterial(N.material,A.material)||this.defaultContactMaterial:O=this.defaultContactMaterial,O.friction,N.material&&A.material&&(N.material.friction>=0&&A.material.friction>=0&&N.material.friction*A.material.friction,N.material.restitution>=0&&A.material.restitution>=0&&(T.restitution=N.material.restitution*A.material.restitution)),r.addEquation(T),N.allowSleep&&N.type===F.DYNAMIC&&N.sleepState===F.SLEEPING&&A.sleepState===F.AWAKE&&A.type!==F.STATIC){const k=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),V=A.sleepSpeedLimit**2;k>=V*2&&(N.wakeUpAfterNarrowphase=!0)}if(A.allowSleep&&A.type===F.DYNAMIC&&A.sleepState===F.SLEEPING&&N.sleepState===F.AWAKE&&N.type!==F.STATIC){const k=N.velocity.lengthSquared()+N.angularVelocity.lengthSquared(),V=N.sleepSpeedLimit**2;k>=V*2&&(A.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(N,A,!0),this.collisionMatrixPrevious.get(N,A)||(Et.body=A,Et.contact=T,N.dispatchEvent(Et),Et.body=N,A.dispatchEvent(Et)),this.bodyOverlapKeeper.set(N.id,A.id),this.shapeOverlapKeeper.set(j.id,L.id)}for(this.emitContactEvents(),c&&(u.makeContactConstraints=U.now()-h,h=U.now()),v=0;v!==i;v++){const E=o[v];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(x=f.length,v=0;v!==x;v++){const E=f[v];E.update();for(let T=0,N=E.equations.length;T!==N;T++){const A=E.equations[T];r.addEquation(A)}}r.solve(t,this),c&&(u.solve=U.now()-h),r.removeAllEquations();const P=Math.pow;for(v=0;v!==i;v++){const E=o[v];if(E.type&d){const T=P(1-E.linearDamping,t),N=E.velocity;N.scale(T,N);const A=E.angularVelocity;if(A){const j=P(1-E.angularDamping,t);A.scale(j,A)}}}this.dispatchEvent(Fi),c&&(h=U.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,z=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,B,z);this.clearForces(),this.broadphase.dirty=!0,c&&(u.integrate=U.now()-h),this.stepnumber+=1,this.dispatchEvent(Pi);let _=!0;if(this.allowSleep)for(_=!1,v=0;v!==i;v++){const E=o[v];E.sleepTick(this.time),E.sleepState!==F.SLEEPING&&(_=!0)}this.hasActiveBodies=_}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(rt,at),t){for(let i=0,o=rt.length;i<o;i+=2)zt.bodyA=this.getBodyById(rt[i]),zt.bodyB=this.getBodyById(rt[i+1]),this.dispatchEvent(zt);zt.bodyA=zt.bodyB=null}if(e){for(let i=0,o=at.length;i<o;i+=2)Ct.bodyA=this.getBodyById(at[i]),Ct.bodyB=this.getBodyById(at[i+1]),this.dispatchEvent(Ct);Ct.bodyA=Ct.bodyB=null}rt.length=at.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(rt,at),s){for(let i=0,o=rt.length;i<o;i+=2){const r=this.getShapeById(rt[i]),a=this.getShapeById(rt[i+1]);lt.shapeA=r,lt.shapeB=a,r&&(lt.bodyA=r.body),a&&(lt.bodyB=a.body),this.dispatchEvent(lt)}lt.bodyA=lt.bodyB=lt.shapeA=lt.shapeB=null}if(n){for(let i=0,o=at.length;i<o;i+=2){const r=this.getShapeById(at[i]),a=this.getShapeById(at[i+1]);ct.shapeA=r,ct.shapeB=a,r&&(ct.bodyA=r.body),a&&(ct.bodyB=a.body),this.dispatchEvent(ct)}ct.bodyA=ct.bodyB=ct.shapeA=ct.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new K;const Yt=new G,U=globalThis.performance||{};if(!U.now){let S=Date.now();U.timing&&U.timing.navigationStart&&(S=U.timing.navigationStart),U.now=()=>Date.now()-S}new l;const Pi={type:"postStep"},Fi={type:"preStep"},Et={type:F.COLLIDE_EVENT_NAME,body:null,contact:null},Ii=[],Ri=[],_i=[],qi=[],rt=[],at=[],zt={type:"beginContact",bodyA:null,bodyB:null},Ct={type:"endContact",bodyA:null,bodyB:null},lt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ct={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};var Wt=function(S,t,e){var s=new Ie,n=new xe,i=new yt,o=new Y,r=new Y,a=new Y,c=new Re,u=[],d=null,h=null,f=this;function p(){e.addEventListener("pointermove",v,!1),e.addEventListener("pointerdown",g,!1),e.addEventListener("pointerup",C,!1),e.addEventListener("pointerleave",C,!1),e.addEventListener("touchmove",P,!1),e.addEventListener("touchstart",R,!1),e.addEventListener("touchend",B,!1)}function m(){e.removeEventListener("pointermove",v,!1),e.removeEventListener("pointerdown",g,!1),e.removeEventListener("pointerup",C,!1),e.removeEventListener("pointerleave",C,!1),e.removeEventListener("touchmove",P,!1),e.removeEventListener("touchstart",R,!1),e.removeEventListener("touchend",B,!1),e.style.cursor=""}function y(){m()}function w(){return S}function v(z){switch(z.preventDefault(),z.pointerType){case"mouse":case"pen":x(z);break}}function x(z){var _=e.getBoundingClientRect();if(i.x=(z.clientX-_.left)/_.width*2-1,i.y=-((z.clientY-_.top)/_.height)*2+1,n.setFromCamera(i,t),d&&f.enabled){n.ray.intersectPlane(s,r)&&d.position.copy(r.sub(o).applyMatrix4(c)),f.dispatchEvent({type:"drag",object:d});return}if(u.length=0,n.setFromCamera(i,t),n.intersectObjects(S,!0,u),u.length>0){var E=u[0].object;s.setFromNormalAndCoplanarPoint(t.getWorldDirection(s.normal),a.setFromMatrixPosition(E.matrixWorld)),h!==E&&(f.dispatchEvent({type:"hoveron",object:E}),e.style.cursor="pointer",h=E)}else h!==null&&(f.dispatchEvent({type:"hoveroff",object:h}),e.style.cursor="auto",h=null)}function g(z){switch(z.preventDefault(),z.pointerType){case"mouse":case"pen":b(z);break}}function b(z){z.preventDefault(),u.length=0,n.setFromCamera(i,t),n.intersectObjects(S,!0,u),u.length>0&&(d=f.transformGroup===!0?S[0]:u[0].object,n.ray.intersectPlane(s,r)&&(c.copy(d.parent.matrixWorld).invert(),o.copy(r).sub(a.setFromMatrixPosition(d.matrixWorld))),e.style.cursor="move",f.dispatchEvent({type:"dragstart",object:d}))}function C(z){switch(z.preventDefault(),z.pointerType){case"mouse":case"pen":M(z);break}}function M(z){z.preventDefault(),d&&(f.dispatchEvent({type:"dragend",object:d}),d=null),e.style.cursor=h?"pointer":"auto"}function P(z){z.preventDefault(),z=z.changedTouches[0];var _=e.getBoundingClientRect();if(i.x=(z.clientX-_.left)/_.width*2-1,i.y=-((z.clientY-_.top)/_.height)*2+1,n.setFromCamera(i,t),d&&f.enabled){n.ray.intersectPlane(s,r)&&d.position.copy(r.sub(o).applyMatrix4(c)),f.dispatchEvent({type:"drag",object:d});return}}function R(z){z.preventDefault(),z=z.changedTouches[0];var _=e.getBoundingClientRect();i.x=(z.clientX-_.left)/_.width*2-1,i.y=-((z.clientY-_.top)/_.height)*2+1,u.length=0,n.setFromCamera(i,t),n.intersectObjects(S,!0,u),u.length>0&&(d=f.transformGroup===!0?S[0]:u[0].object,s.setFromNormalAndCoplanarPoint(t.getWorldDirection(s.normal),a.setFromMatrixPosition(d.matrixWorld)),n.ray.intersectPlane(s,r)&&(c.copy(d.parent.matrixWorld).invert(),o.copy(r).sub(a.setFromMatrixPosition(d.matrixWorld))),e.style.cursor="move",f.dispatchEvent({type:"dragstart",object:d}))}function B(z){z.preventDefault(),d&&(f.dispatchEvent({type:"dragend",object:d}),d=null),e.style.cursor="auto"}p(),this.enabled=!0,this.transformGroup=!1,this.activate=p,this.deactivate=m,this.dispose=y,this.getObjects=w};Wt.prototype=Object.create(_e.prototype);Wt.prototype.constructor=Wt;var Li={computeTangents:function(S){var t=S.index,e=S.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}var s=t.array,n=e.position.array,i=e.normal.array,o=e.uv.array,r=n.length/3;e.tangent===void 0&&S.setAttribute("tangent",new Ft(new Float32Array(4*r),4));for(var a=e.tangent.array,c=[],u=[],d=0;d<r;d++)c[d]=new Y,u[d]=new Y;var h=new Y,f=new Y,p=new Y,m=new yt,y=new yt,w=new yt,v=new Y,x=new Y;function g(k,V,q){h.fromArray(n,k*3),f.fromArray(n,V*3),p.fromArray(n,q*3),m.fromArray(o,k*2),y.fromArray(o,V*2),w.fromArray(o,q*2),f.sub(h),p.sub(h),y.sub(m),w.sub(m);var X=1/(y.x*w.y-w.x*y.y);!isFinite(X)||(v.copy(f).multiplyScalar(w.y).addScaledVector(p,-y.y).multiplyScalar(X),x.copy(p).multiplyScalar(y.x).addScaledVector(f,-w.x).multiplyScalar(X),c[k].add(v),c[V].add(v),c[q].add(v),u[k].add(x),u[V].add(x),u[q].add(x))}var b=S.groups;b.length===0&&(b=[{start:0,count:s.length}]);for(var d=0,C=b.length;d<C;++d)for(var M=b[d],P=M.start,R=M.count,B=P,z=P+R;B<z;B+=3)g(s[B+0],s[B+1],s[B+2]);var _=new Y,E=new Y,T=new Y,N=new Y,A,j,L;function O(k){T.fromArray(i,k*3),N.copy(T),j=c[k],_.copy(j),_.sub(T.multiplyScalar(T.dot(j))).normalize(),E.crossVectors(N,j),L=E.dot(u[k]),A=L<0?-1:1,a[k*4]=_.x,a[k*4+1]=_.y,a[k*4+2]=_.z,a[k*4+3]=A}for(var d=0,C=b.length;d<C;++d)for(var M=b[d],P=M.start,R=M.count,B=P,z=P+R;B<z;B+=3)O(s[B+0]),O(s[B+1]),O(s[B+2])},mergeBufferGeometries:function(S,t){for(var e=S[0].index!==null,s=new Set(Object.keys(S[0].attributes)),n=new Set(Object.keys(S[0].morphAttributes)),i={},o={},r=S[0].morphTargetsRelative,a=new be,c=0,u=0;u<S.length;++u){var d=S[u],h=0;if(e!==(d.index!==null))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var f in d.attributes){if(!s.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+'. All geometries must have compatible attributes; make sure "'+f+'" attribute exists among all geometries, or in none of them.'),null;i[f]===void 0&&(i[f]=[]),i[f].push(d.attributes[f]),h++}if(h!==s.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". Make sure all geometries have the same number of attributes."),null;if(r!==d.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in d.morphAttributes){if(!n.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+".  .morphAttributes must be consistent throughout all geometries."),null;o[f]===void 0&&(o[f]=[]),o[f].push(d.morphAttributes[f])}if(a.userData.mergedUserData=a.userData.mergedUserData||[],a.userData.mergedUserData.push(d.userData),t){var p;if(e)p=d.index.count;else if(d.attributes.position!==void 0)p=d.attributes.position.count;else return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". The geometry must have either an index or a position attribute"),null;a.addGroup(c,p,u),c+=p}}if(e){for(var m=0,y=[],u=0;u<S.length;++u){for(var w=S[u].index,v=0;v<w.count;++v)y.push(w.getX(v)+m);m+=S[u].attributes.position.count}a.setIndex(y)}for(var f in i){var x=this.mergeBufferAttributes(i[f]);if(!x)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" attribute."),null;a.setAttribute(f,x)}for(var f in o){var g=o[f][0].length;if(g===0)break;a.morphAttributes=a.morphAttributes||{},a.morphAttributes[f]=[];for(var u=0;u<g;++u){for(var b=[],v=0;v<o[f].length;++v)b.push(o[f][v][u]);var C=this.mergeBufferAttributes(b);if(!C)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" morphAttribute."),null;a.morphAttributes[f].push(C)}}return a},mergeBufferAttributes:function(S){for(var t,e,s,n=0,i=0;i<S.length;++i){var o=S[i];if(o.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(t===void 0&&(t=o.array.constructor),t!==o.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(e===void 0&&(e=o.itemSize),e!==o.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(s===void 0&&(s=o.normalized),s!==o.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;n+=o.array.length}for(var r=new t(n),a=0,i=0;i<S.length;++i)r.set(S[i].array,a),a+=S[i].array.length;return new Ft(r,e,s)},interleaveAttributes:function(S){for(var t,e=0,s=0,n=0,i=S.length;n<i;++n){var o=S[n];if(t===void 0&&(t=o.array.constructor),t!==o.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;e+=o.array.length,s+=o.itemSize}for(var r=new qe(new t(e),s),a=0,c=[],u=["getX","getY","getZ","getW"],d=["setX","setY","setZ","setW"],h=0,i=S.length;h<i;h++){var o=S[h],f=o.itemSize,p=o.count,m=new Le(r,f,a,o.normalized);c.push(m),a+=f;for(var y=0;y<p;y++)for(var w=0;w<f;w++)m[d[w]](y,o[u[w]](y))}return c},estimateBytesUsed:function(S){var t=0;for(var e in S.attributes){var s=S.getAttribute(e);t+=s.count*s.itemSize*s.array.BYTES_PER_ELEMENT}var n=S.getIndex();return t+=n?n.count*n.itemSize*n.array.BYTES_PER_ELEMENT:0,t},mergeVertices:function(S,t=1e-4){t=Math.max(t,Number.EPSILON);for(var e={},s=S.getIndex(),n=S.getAttribute("position"),i=s?s.count:n.count,o=0,r=Object.keys(S.attributes),a={},c={},u=[],d=["getX","getY","getZ","getW"],h=0,f=r.length;h<f;h++){var p=r[h];a[p]=[];var m=S.morphAttributes[p];m&&(c[p]=new Array(m.length).fill().map(()=>[]))}for(var y=Math.log10(1/t),w=Math.pow(10,y),h=0;h<i;h++){for(var v=s?s.getX(h):h,x="",g=0,f=r.length;g<f;g++)for(var p=r[g],b=S.getAttribute(p),C=b.itemSize,M=0;M<C;M++)x+=`${~~(b[d[M]](v)*w)},`;if(x in e)u.push(e[x]);else{for(var g=0,f=r.length;g<f;g++)for(var p=r[g],b=S.getAttribute(p),m=S.morphAttributes[p],C=b.itemSize,P=a[p],R=c[p],M=0;M<C;M++){var B=d[M];if(P.push(b[B](v)),m)for(var z=0,_=m.length;z<_;z++)R[z].push(m[z][B](v))}e[x]=o,u.push(o),o++}}const E=S.clone();for(var h=0,f=r.length;h<f;h++){var p=r[h],T=S.getAttribute(p),N=new T.array.constructor(a[p]),b=new Ft(N,T.itemSize,T.normalized);if(E.setAttribute(p,b),p in c)for(var g=0;g<c[p].length;g++){var A=S.morphAttributes[p][g],N=new A.array.constructor(c[p][g]),j=new Ft(N,A.itemSize,A.normalized);E.morphAttributes[p][g]=j}}return E.setIndex(u),E},toTrianglesDrawMode:function(S,t){if(t===Oe)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),S;if(t===Kt||t===je){var e=S.getIndex();if(e===null){var s=[],n=S.getAttribute("position");if(n!==void 0){for(var i=0;i<n.count;i++)s.push(i);S.setIndex(s),e=S.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),S}var o=e.count-2,r=[];if(t===Kt)for(var i=1;i<=o;i++)r.push(e.getX(0)),r.push(e.getX(i)),r.push(e.getX(i+1));else for(var i=0;i<o;i++)i%2===0?(r.push(e.getX(i)),r.push(e.getX(i+1)),r.push(e.getX(i+2))):(r.push(e.getX(i+2)),r.push(e.getX(i+1)),r.push(e.getX(i)));r.length/3!==o&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var a=S.clone();return a.setIndex(r),a.clearGroups(),a}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),S}};const Oi=rs('<div id="progressDiv" class="w-full bg-gray-200 h-2 mb-6 absolute top-1/2" data-v-c6b7858c><div id="progress" class="transition-all duration-200 ease-in-out bg-main-active h-2 w-{{progressRatio}}" data-v-c6b7858c></div></div><div class="point point-0" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>1</div><div class="text select-none" data-v-c6b7858c>This is creation of Roy</div></div><div class="point point-1" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>2</div><div class="text select-none" data-v-c6b7858c>Switch</div></div><div class="point point-2" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>3</div><div class="text select-none" data-v-c6b7858c>Light Switch</div></div><div class="point point-3" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>4</div><div class="text select-none" data-v-c6b7858c>Power</div></div><div class="point point-4" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>5</div><div class="text select-none" data-v-c6b7858c>Elden Ring</div></div><div class="point point-5" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>6</div><div class="text select-none" data-v-c6b7858c>USB</div></div><div class="point point-6" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>7</div><div class="text select-none" data-v-c6b7858c>This is creation of Roy</div></div><div class="point point-7" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>8</div><div class="text select-none" data-v-c6b7858c>This is creation of Roy</div></div><div class="point point-8" data-v-c6b7858c><div class="label select-none" data-v-c6b7858c>9</div><div class="text select-none" data-v-c6b7858c>This is creation of Roy</div></div>',10),ji={setup(S){let t,e,s,n,i,o,r=ns(0),a,c,u=0,d=!1,h=-1;new xe,new yt,new yt;const f=new Ze,p=[],m=[],y=new es.exports.Pane;t={},is(()=>{x(),v(),window.addEventListener("resize",()=>{w.width=window.innerWidth,w.height=window.innerHeight,e.aspect=w.width/w.height,e.updateProjectionMatrix(),s.setSize(w.width,w.height),s.setPixelRatio(Math.min(window.devicePixelRatio,2))}),b()});const w={width:window.innerWidth,height:window.innerHeight};function v(){const M=document.querySelector("#progress"),P=document.querySelector("#progressDiv");o=new We,e=new ke(75,w.width/w.height,.1,100),e.position.set(.7043043492115377,14.388569228135337,9.239105833036682),e.quaternion.set(-.27029782041898764,-.0006752835476387169,-.00018958467553528339,.9627765038296925),e.rotation.set(-.5474052811931926,-.0011978059034376911,-.0007301112729914485),o.add(e);const R=new Ve(4210752);R.intensity=3,o.add(R);const B=20,z=new De("#ffffff",3);z.position.set(0,34,-21),z.castShadow=!0,z.shadow.camera.far=50,z.shadow.mapSize.set(1024,1024),z.shadow.camera.top=B,z.shadow.camera.bottom=-B,z.shadow.camera.left=-B,z.shadow.camera.right=B,z.show=200,o.add(z),y.addInput(z,"intensity",{min:0,max:100,step:.001}),y.addInput(z.position,"x",{min:-100,max:100,step:.001}),y.addInput(z.position,"y",{min:-100,max:100,step:.001}),y.addInput(z.position,"z",{min:-100,max:100,step:.001});const _=new Ke(()=>{window.setTimeout(()=>{ts.to(O.uniforms.uAlpha,{duration:1,value:0}),P.style.visibility="hidden"},500)},(V,q,X)=>{r.value=q/X*100,M.style.width=`${r.value}%`}),E=new Je;E.setDecoderPath("/draco/");const T=new Qe(_);T.setDRACOLoader(E);const A=new Ge(_).load(["/textures/environmentMaps/0/px.jpg","/textures/environmentMaps/0/nx.jpg","/textures/environmentMaps/0/py.jpg","/textures/environmentMaps/0/ny.jpg","/textures/environmentMaps/0/pz.jpg","/textures/environmentMaps/0/nz.jpg"]);Promise.all([T.loadAsync("models/DSPEC_jr/DSPEC_jr.gltf"),T.loadAsync("models/Detector_model/Detector.gltf"),T.loadAsync("models/modern_coffee_table_01_2k_2.blend/modern_coffee_table_01_2k.gltf")]).then(V=>{const[q,X,ft]=V;let Z;q.scene.traverse(function(ht){ht.name==="DSPEC_jr"&&(Z=C(ht.children),Z.geometry.center())}),Z.scale.set(.7,.7,.7),Z.position.set(0,8.28,0),Z.userData.i=0;const gt=new Jt().setFromObject(Z),Tt=new At(gt.getSize().divide(new Y(2,2,2))),Nt=new F({mass:1,material:c});Nt.addShape(Tt),Nt.position.copy(Z.position),a.addBody(Nt),o.add(Z),p.push(Nt),m.push(Z);let tt;X.scene.traverse(function(ht){ht.name==="Detector"&&(tt=C(ht.children),tt.geometry.center())}),tt.userData.i=1,tt.position.set(5,8.28,0),tt.rotation.z=-Math.PI/2,tt.rotation.y=-Math.PI/2;const Ne=new un(.57,.57,3.55,20),xt=new F({mass:20,material:c});xt.addShape(Ne),xt.position.copy(tt.position),xt.quaternion.copy(tt.quaternion),a.addBody(xt),o.add(tt),p.push(xt),m.push(tt);let it;ft.scene.traverse(function(ht){ht.name==="modern_coffee_table_01"&&(it=ht,it.geometry.center())}),it.userData.i=-1,it.scale.set(20,20,20),it.position.set(0,3.9,0);let Pe=new Jt().setFromObject(it);const Fe=new At(Pe.getSize().divide(new Y(2,2,2))),Pt=new F({mass:20,material:c});Pt.addShape(Fe),Pt.position.copy(it.position),a.addBody(Pt),o.add(it),p.push(Pt),m.push(it),g(),d=!0});const j=new It(new Qt(50,50),new kt({color:"#777777",metalness:.3,roughness:.4,envMap:A}));j.receiveShadow=!0,j.rotation.x=-Math.PI*.5,o.add(j);const L=new Qt(2,2,1,1),O=new He({wireframe:!0,transparent:!0,uniforms:{uAlpha:{value:1}},vertexShader:`

    void main(){
        gl_Position = vec4(position, 1.0);
        
    }`,fragmentShader:`
    uniform float uAlpha;

    void main(){
        gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);
    }`}),k=new It(L,O);o.add(k),A.encoding=te,o.background=A,o.environment=A,s=new Ue({antialias:!0}),s.setSize(w.width,w.height),s.setPixelRatio(window.devicePixelRatio),s.physicallyCorrectLights=!0,s.outputEncoding=te,s.toneMapping=Ye,s.toneMappingExposure=3,s.shadowMap.enabled=!0,s.shadowMap.type=Xe,document.body.appendChild(s.domElement),n=new $e(e,s.domElement),n.enableDamping=!0,i=new Wt(m,e,s.domElement),i.addEventListener("dragstart",function(V){h=V.object.userData.i,h!==-1&&(n.enabled=!1)}),i.addEventListener("dragend",function(V){h=-1,n.enabled=!0}),i.addEventListener("drag",function(V){})}function x(){a=new Ni,a.gravity.set(0,-9.8,0),a.allowSleep=!0,c=new Bt("physics");const M=new St(c,c,{friction:10,restitution:0});a.addContactMaterial(M);const P=new dn,R=new F({mass:0,material:c});R.addShape(P),R.quaternion.setFromEuler(-Math.PI/2,0,0),a.addBody(R)}t.envMapIntensity=10,y.addInput(t,"envMapIntensity",{min:0,max:10,step:.01}).on("change",g);function g(){o.traverse(M=>{M instanceof It&&M.material instanceof kt&&(M.material.envMapIntensity=t.envMapIntensity,M.material.needsUpdate=!0,M.castShadow=!0,M.receiveShadow=!0)})}os(()=>{});const b=()=>{const M=f.getElapsedTime(),P=M-u;u=M,a.step(1/60,P,3),d&&m.forEach((R,B)=>{B===h?(p[B].position.copy(R.position),p[B].quaternion.copy(R.quaternion),p[B].velocity.set(0,0,0),p[B].angularVelocity.set(0,0,0)):(R.position.copy(p[B].position),R.quaternion.copy(p[B].quaternion))}),n.update(),s.render(o,e),window.requestAnimationFrame(b)};function C(M){var P=[],R=[],B=new be,z,_;return M.forEach(function(E,T){E.updateMatrix(),R.push(E.geometry),z=new kt(E.material),P.push(z)}),B=Li.mergeBufferGeometries(R,!0),B.groupsNeedUpdate=!0,_=new It(B,P),_}return(M,P)=>Oi}};var Hi=ss(ji,[["__scopeId","data-v-c6b7858c"]]);export{Hi as default};
